// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki 16bit

#pragma anki mutator ANIMATED_TEXTURE 0 1
#pragma anki mutator LIGHT 0 1

#pragma anki technique ForwardLegacy vert pixel

#include <AnKi/Shaders/ForwardShadingCommon.hlsl>

struct VertIn
{
	UVec4 m_gpuSceneRenderable : MISC0;
	U32 m_svVertexId : SV_VERTEXID;
};

struct VertOut
{
	nointerpolation U32 m_constantsOffset : UNIS_OFFSET;
	nointerpolation F32 m_alpha : ALPHA;
	Vec2 m_uv : TEXCOORD;
	Vec3 m_worldPos : WORLD_POS;
	Vec4 m_svPosition : SV_POSITION;
};

#pragma anki struct AnKiLocalConstants
#pragma anki member F32 m_animationPeriod
#pragma anki member Vec4 m_colorScale
#pragma anki member Vec4 m_colorBias
#pragma anki member U32 m_diffuseMap
#pragma anki struct_end

#if ANKI_VERTEX_SHADER
VertOut main(VertIn input)
{
	const GpuSceneRenderableInstance instance = unpackGpuSceneRenderableVertex(input.m_gpuSceneRenderable);
	const GpuSceneParticleEmitter particles = g_particleEmitters[instance.m_boneTransformsOffsetOrParticleEmitterIndex];
	const GpuSceneMeshLod meshLod = g_meshLods[instance.m_meshLodIndex];

	const U32 particleId = input.m_svVertexId / meshLod.m_indexCount;
	const U32 vertexId = g_unifiedGeom_R16_Uint[meshLod.m_firstIndex + input.m_svVertexId % meshLod.m_indexCount];

	U32 idx = particles.m_vertexOffsets[(U32)VertexStreamId::kParticlePosition] + particleId * sizeof(Vec3);
	const Vec3 particlePos = g_gpuScene.Load<Vec3>(idx);
	idx = particles.m_vertexOffsets[(U32)VertexStreamId::kParticleScale] + particleId * sizeof(F32);
	const F32 particleScale = g_gpuScene.Load<F32>(idx);
	idx = particles.m_vertexOffsets[(U32)VertexStreamId::kParticleColor] + particleId * sizeof(F32);
	const F32 particleAlpha = g_gpuScene.Load<F32>(idx);

	VertOut output;

	output.m_uv = g_unifiedGeom_R32G32_Sfloat[meshLod.m_vertexOffsets[(U32)VertexStreamId::kUv] + vertexId];

	const Vec3 localPos =
		g_unifiedGeom_R16G16B16A16_Unorm[meshLod.m_vertexOffsets[(U32)VertexStreamId::kPosition] + vertexId] * meshLod.m_positionScale
		+ meshLod.m_positionTranslation;

	// Apply the particle scale, rotate the mesh to face the camera (billboard) and finally apply the particle position
	output.m_worldPos = mul(g_globalConstants.m_cameraTransform, Vec4(localPos * particleScale, 0.0)) + particlePos;

	output.m_svPosition = mul(g_globalConstants.m_viewProjectionMatrix, Vec4(output.m_worldPos, 1.0));

	output.m_alpha = particleAlpha;
	output.m_constantsOffset = instance.m_constantsOffset;

	return output;
}
#endif // ANKI_VERTEX_SHADER

#if ANKI_PIXEL_SHADER
PixelOut main(VertOut input)
{
	PixelOut output = (PixelOut)0;
	const AnKiLocalConstants localConstants = loadAnKiLocalConstants(g_gpuScene, WaveReadLaneFirst(input.m_constantsOffset));

#	if ANIMATED_TEXTURE == 1
	Vec4 texCol = readAnimatedTextureRgba(getBindlessTexture2DArrayVec4(localConstants.m_diffuseMap), g_globalSampler,
										  localConstants.m_animationPeriod, input.m_uv, g_globalRendererConstants.m_time);
#	else
	Vec4 texCol = getBindlessTexture2DVec4(localConstants.m_diffuseMap).Sample(g_globalSampler, input.m_uv);
#	endif

#	if LIGHT
	texCol.rgb = computeLightColorLow(texCol.rgb, input.m_worldPos, input.m_svPosition);
#	endif

	Vec4 colScale = localConstants.m_colorScale;
	colScale.a *= input.m_alpha;
	particleAlpha(texCol, colScale, localConstants.m_colorBias, output);

	return output;
}
#endif // ANKI_PIXEL_SHADER
