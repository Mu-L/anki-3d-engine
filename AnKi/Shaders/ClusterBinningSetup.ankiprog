// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// This shader prepares the indirect args of future dispatches

#pragma anki technique_start comp

#include <AnKi/Shaders/Common.hlsl>
#include <AnKi/Shaders/Include/ClusteredShadingTypes.h>

StructuredBuffer<U32> g_visibleIndices[(U32)GpuSceneNonRenderableObjectType::kCount] : register(t0);

// This has a size of 2*GpuSceneNonRenderableObjectType::kCount. The first GpuSceneNonRenderableObjectType::kCount elements are for the cluster
// binning dispatches and the rest GpuSceneNonRenderableObjectType::kCount for the packing dispatches
RWStructuredBuffer<DispatchIndirectArgs> g_indirectArgs : register(u0);

struct Constants
{
	U32 m_tileCount;
	U32 m_padding1;
	U32 m_padding2;
	U32 m_padding3;
};
ANKI_FAST_CONSTANTS(Constants, g_consts)

constexpr U32 kSampleCount = 8;
constexpr U32 kClusterBinningThreadgroupSize = 64;
constexpr U32 kPackVisiblesThreadgroupSize = 64;

#define THREADGROUP_SIZE 16

[numthreads(THREADGROUP_SIZE, 1, 1)] void main(U32 svDispatchThreadId : SV_DISPATCHTHREADID)
{
	if(svDispatchThreadId < (U32)GpuSceneNonRenderableObjectType::kCount)
	{
		// First threads set the dispatch args of cluster binning

		const GpuSceneNonRenderableObjectType type = (GpuSceneNonRenderableObjectType)svDispatchThreadId;
		const U32 objCount = min(kMaxVisibleClusteredObjects[(U32)type], g_visibleIndices[(U32)type][0]);

		DispatchIndirectArgs args;
		args.m_threadGroupCountX = (g_consts.m_tileCount * kSampleCount + kClusterBinningThreadgroupSize - 1) / kClusterBinningThreadgroupSize;
		args.m_threadGroupCountY = objCount;
		args.m_threadGroupCountZ = 1;

		g_indirectArgs[svDispatchThreadId] = args;
	}
	else if(svDispatchThreadId < (U32)GpuSceneNonRenderableObjectType::kCount * 2)
	{
		// Next threads set the dispatch args of packing

		const GpuSceneNonRenderableObjectType type =
			(GpuSceneNonRenderableObjectType)(svDispatchThreadId - (U32)GpuSceneNonRenderableObjectType::kCount);
		const U32 objCount = min(kMaxVisibleClusteredObjects[(U32)type], g_visibleIndices[(U32)type][0]);

		DispatchIndirectArgs args;
		args.m_threadGroupCountX = (objCount + kPackVisiblesThreadgroupSize - 1) / kPackVisiblesThreadgroupSize;
		args.m_threadGroupCountY = 1;
		args.m_threadGroupCountZ = 1;

		g_indirectArgs[svDispatchThreadId] = args;
	}
	else
	{
		// Skip remaining threads
	}
}

#pragma anki technique_end comp
