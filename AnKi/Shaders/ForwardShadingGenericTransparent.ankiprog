// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator TEXTURE 0 1
#pragma anki mutator LIGHT 0 1

#include <AnKi/Shaders/ForwardShadingCommon.hlsl>

#pragma anki struct AnKiLocalConstants
#pragma anki member U32 m_texture
#pragma anki member RVec4 m_colorScale
#pragma anki member RVec4 m_colorBias
#pragma anki struct_end

struct VertIn
{
	UVec4 m_gpuSceneRenderable : MISC0;
	U32 m_svVertexId : SV_VERTEXID;
};

struct VertOut
{
	Vec2 m_uv : TEXCOORD;
	Vec3 m_worldPosition : WORLD_POSITION;
	Vec4 m_svPosition : SV_POSITION;
	nointerpolation U32 m_constantsOffset : CONSTANTS_OFFSET;
};

#pragma anki technique_start vert Forward

VertOut main(VertIn input)
{
	VertOut output;

	const GpuSceneRenderableInstance renderable = unpackGpuSceneRenderableVertex(input.m_gpuSceneRenderable);
	const GpuSceneMeshLod mesh = g_meshLods[renderable.m_meshLodIndex];
	const Mat3x4 worldTransform = g_transforms[renderable.m_worldTransformsIndex];
	const UnpackedMeshVertex vertex = loadVertex(mesh, input.m_svVertexId, false);

	output.m_worldPosition = mul(worldTransform, Vec4(vertex.m_position, 1.0));

	output.m_svPosition = mul(g_globalConstants.m_viewProjectionMatrix, Vec4(output.m_worldPosition, 1.0));

	output.m_uv = vertex.m_uv;
	output.m_constantsOffset = renderable.m_constantsOffset;

	return output;
}
#pragma anki technique_end vert Forward

#pragma anki technique_start pixel Forward

PixelOut main(VertOut input)
{
	ANKI_MAYBE_UNUSED(input);
	PixelOut output;

	const AnKiLocalConstants localConstants = loadAnKiLocalConstants(g_gpuScene, WaveReadLaneFirst(input.m_constantsOffset));

	output.m_color = RVec4(1.0, 1.0, 1.0, 1.0);

#if TEXTURE == 1
	output.m_color = getBindlessTexture2DRVec4(localConstants.m_texture).Sample(g_globalSampler, input.m_uv);
#endif

#if LIGHT == 1
	output.m_color.rgb = computeLightColorLow(output.m_color.rgb, input.m_worldPosition, input.m_svPosition);
#endif

	output.m_color = output.m_color * localConstants.m_colorScale + localConstants.m_colorBias;

	return output;
}
#pragma anki technique_end pixel Forward
