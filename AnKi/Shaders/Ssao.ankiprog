// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// Ground truth ambiend occlusion

#pragma anki mutator SPATIAL_DENOISE_QUALITY 0 1

#include <AnKi/Shaders/QuadVert.hlsl>

// ===========================================================================
// SSAO                                                                      =
// ===========================================================================
#if ANKI_TECHNIQUE_Ssao && (ANKI_COMPUTE_SHADER || ANKI_FRAGMENT_SHADER)
#	include <AnKi/Shaders/Include/MiscRendererTypes.h>
#	include <AnKi/Shaders/Functions.hlsl>
#	include <AnKi/Shaders/PackFunctions.hlsl>
#	include <AnKi/Shaders/FastMathFunctions.hlsl>
#	include <AnKi/Shaders/ImportanceSampling.hlsl>

Texture2D<Vec4> g_gbufferRt2 : register(t0);
Texture2D<Vec4> g_depthTex : register(t1);

Texture2D<RVec4> g_noiseTex : register(t2);
SamplerState g_trilinearRepeatSampler : register(s0);
SamplerState g_linearAnyClampSampler : register(s1);

#	if ANKI_COMPUTE_SHADER
RWTexture2D<RVec4> g_bentNormalsAndSsaoStorageTex : register(u0);
#	endif

ANKI_FAST_CONSTANTS(SsaoConstants, g_consts)

Vec3 unproject(Vec2 ndc)
{
	const F32 d = g_depthTex.SampleLevel(g_linearAnyClampSampler, ndcToUv(ndc), 0.0).r;
	return cheapPerspectiveUnprojection(g_consts.m_unprojectionParameters, ndc, d);
}

Vec4 project(Vec4 p)
{
	return cheapPerspectiveProjection(g_consts.m_projectionMat00, g_consts.m_projectionMat11, g_consts.m_projectionMat22, g_consts.m_projectionMat23,
									  p);
}

RF32 computeFalloff(RF32 len)
{
	return sqrt(1.0f - min(1.0f, len / g_consts.m_radius));
}

#	if ANKI_COMPUTE_SHADER
[numthreads(8, 8, 1)] void main(UVec2 svDispatchThreadId : SV_DISPATCHTHREADID)
#	else
RVec4 main(VertOut input) : SV_TARGET0
#	endif
{
#	if ANKI_COMPUTE_SHADER
	const Vec2 uv = (Vec2(svDispatchThreadId) + 0.5) / g_consts.m_viewportSizef;
#	else
	const UVec2 svDispatchThreadId = input.m_svPosition;
	ANKI_MAYBE_UNUSED(svDispatchThreadId);
	const Vec2 uv = input.m_uv;
#	endif

	const Vec2 ndc = uvToNdc(uv);
	const F32 depth = g_depthTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).r;
	const Vec3 Pc = cheapPerspectiveUnprojection(g_consts.m_unprojectionParameters, ndc, depth);
	const RVec3 V = normalize(-Pc); // View vector

	// Get noise
#	if 0
	Vec2 noiseTexSize;
	g_noiseTex.GetDimensions(noiseTexSize.x, noiseTexSize.y);
	const RVec2 noiseUv = Vec2(g_consts.m_viewportSizef) / noiseTexSize * uv;
	const RVec2 noise2 = animateBlueNoise(g_noiseTex.SampleLevel(g_trilinearRepeatSampler, noiseUv, 0.0).xyz, g_consts.m_frameCount).yx;
#	else
	const RVec2 noise2 = spatioTemporalNoise(svDispatchThreadId, g_consts.m_frameCount);
#	endif

	// Rand slice direction
	const RF32 randAng = noise2.x * kPi;
#	if 0
	const RF32 aspect = g_consts.m_viewportSizef.x / g_consts.m_viewportSizef.y;
	const RVec2 dir2d = normalize(Vec2(cos(randAng), sin(randAng)) * Vec2(1.0f, aspect));
#	else
	const RVec2 dir2d = Vec2(cos(randAng), sin(randAng));
#	endif

	// Project the view normal to the slice
	const Vec3 worldNormal = unpackNormalFromGBuffer(g_gbufferRt2.SampleLevel(g_linearAnyClampSampler, uv, 0.0));
	const RVec3 viewNormal = mul(g_consts.m_viewMat, Vec4(worldNormal, 0.0));

	const RVec3 directionVec = RVec3(dir2d, 0.0f);
	const RVec3 orthoDirectionVec = directionVec - (dot(directionVec, V) * V);
	const RVec3 axisVec = normalize(cross(orthoDirectionVec, V));
	const RVec3 projectedNormalVec = viewNormal - axisVec * dot(viewNormal, axisVec);
	const RF32 signNorm = (F32)sign(dot(orthoDirectionVec, projectedNormalVec));
	const RF32 projectedNormalVecLength = length(projectedNormalVec);
	const RF32 cosNorm = saturate(dot(projectedNormalVec, V) / projectedNormalVecLength);
	const RF32 n = -signNorm * fastAcos(cosNorm);

	// Find the projected radius
	const Vec3 sphereLimit = Pc + Vec3(g_consts.m_radius, 0.0, 0.0);
	const Vec4 projSphereLimit = project(Vec4(sphereLimit, 1.0));
	const Vec2 projSphereLimit2 = projSphereLimit.xy / projSphereLimit.w;
	const RF32 projRadius = length(projSphereLimit2 - ndc);

	// Compute the inner integral (Slide 54)
	const U32 stepCount = max(1u, g_consts.m_sampleCount / 2u);

	const RF32 lowHorizonCos1 = cos(n - kPi / 2.0f);
	const RF32 lowHorizonCos2 = cos(n + kPi / 2.0f);

	RF32 cosH1 = lowHorizonCos1;
	RF32 cosH2 = lowHorizonCos2;

	for(U32 i = 0u; i < stepCount; ++i)
	{
		const RF32 stepBaseNoise = RF32(i * stepCount) * 0.6180339887498948482;
		const RF32 stepNoise = frac(noise2.y + stepBaseNoise);
		RF32 s = (i + stepNoise) / RF32(stepCount);
		s *= s;
		const Vec2 sampleOffset = dir2d * projRadius * s;

		// h1
		const Vec3 Ps = unproject(ndc + sampleOffset);
		const Vec3 Ds = Ps - Pc;
		const RF32 DsLen = length(Ds);
		cosH1 = max(cosH1, lerp(lowHorizonCos1, dot(V, Ds) / DsLen, computeFalloff(DsLen)));

		// h2
		const Vec3 Pt = unproject(ndc - sampleOffset);
		const Vec3 Dt = Pt - Pc;
		const RF32 DtLen = length(Dt);
		cosH2 = max(cosH2, lerp(lowHorizonCos2, dot(V, Dt) / DtLen, computeFalloff(DtLen)));
	}

	// Compute the h1 and h2
	const RF32 h1 = n + max(-fastAcos(cosH1) - n, -kPi / 2);
	const RF32 h2 = n + min(fastAcos(cosH2) - n, kPi / 2);

	// Compute the final value (Slide 61)
	RF32 Vd = -cos(2.0f * h1 - n) + cos(n) + 2.0f * h1 * sin(n);
	Vd += -cos(2.0f * h2 - n) + cos(n) + 2.0f * h2 * sin(n);
	Vd *= 0.25;
	Vd *= projectedNormalVecLength;

	// Apply power
	Vd = pow(Vd, g_consts.m_ssaoPower);

	// Compute bent normal: see "Algorithm 2 Extension that computes bent normals b."
	const RF32 t0 =
		(6.0f * sin(h1 - n) - sin(3.0f * h1 - n) + 6.0f * sin(h2 - n) - sin(3.0f * h2 - n) + 16.0f * sin(n) - 3.0f * (sin(h1 + n) + sin(h2 + n)))
		/ 12.0f;
	const RF32 t1 = (-cos(3.0f * h1 - n) - cos(3.0f * h2 - n) + 8.0f * cos(n) - 3.0f * (cos(h1 + n) + cos(h2 + n))) / 12.0f;
	RVec3 bentNormal = RVec3(-dir2d.x * t0, -dir2d.y * t0, t1);
	bentNormal = normalize(bentNormal);

#	if ANKI_COMPUTE_SHADER
	g_bentNormalsAndSsaoStorageTex[svDispatchThreadId] = RVec4(bentNormal, Vd);
#	else
	return RVec4(bentNormal, Vd);
#	endif
}
#endif // ANKI_TECHNIQUE_Ssao && (ANKI_COMPUTE_SHADER || ANKI_FRAGMENT_SHADER)

// ===========================================================================
// SSAO spatial denoise                                                      =
// ===========================================================================
#if ANKI_TECHNIQUE_SsaoSpatialDenoise && (ANKI_COMPUTE_SHADER || ANKI_FRAGMENT_SHADER)
#	include <AnKi/Shaders/BilateralFilter.hlsl>
#	include <AnKi/Shaders/Include/MiscRendererTypes.h>
#	include <AnKi/Shaders/Functions.hlsl>

SamplerState g_linearAnyClampSampler : register(s0);
Texture2D<RVec4> g_bentNormalsAndSsaoTex : register(t0);
Texture2D<Vec4> g_depthTex : register(t1);

#	if ANKI_COMPUTE_SHADER
RWTexture2D<RVec4> g_bentNormalsAndSsaoStorageTex : register(u0);
#	endif

ANKI_FAST_CONSTANTS(SsaoSpatialDenoiseConstants, g_consts)

F32 computeWeight(F32 depth, F32 refDepth)
{
	const F32 diff = abs(depth - refDepth);
	return sqrt(1.0 / (0.0003 + diff));
}

void sampleTex(Vec2 uv, IVec2 offset, F32 refDepth, inout RF32 ssao, inout RVec3 bentNormal, inout F32 weight)
{
	const F32 linearDepth = linearizeDepthOptimal(g_depthTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0, offset).x,
												  g_consts.m_linearizeDepthParams.x, g_consts.m_linearizeDepthParams.y);
	const RVec4 bentNormalAndSsao = g_bentNormalsAndSsaoTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0, offset);
	const F32 w = computeWeight(refDepth, linearDepth);
	ssao += bentNormalAndSsao.w * w;
	bentNormal += bentNormalAndSsao.xyz * w;
	weight += w;
}

#	if ANKI_COMPUTE_SHADER
[numthreads(8, 8, 1)] void main(UVec2 svDispatchThreadId : SV_DISPATCHTHREADID)
#	else
RVec4 main(VertOut input) : SV_TARGET0
#	endif
{
// Set UVs
#	if ANKI_COMPUTE_SHADER
	Vec2 textureSize;
	U32 mipCount;
	g_bentNormalsAndSsaoTex.GetDimensions(0, textureSize.x, textureSize.y, mipCount);
	const Vec2 uv = (Vec2(svDispatchThreadId) + 0.5f) / textureSize;
#	else
	const Vec2 uv = input.m_uv;
#	endif

	// Sample ref
	const RVec4 refBentNormalAndSsao = g_bentNormalsAndSsaoTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0);
	RF32 ssao = refBentNormalAndSsao.w;
	RVec3 bentNormal = refBentNormalAndSsao.xyz;
	const F32 refDepth = linearizeDepthOptimal(g_depthTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).x, g_consts.m_linearizeDepthParams.x,
											   g_consts.m_linearizeDepthParams.y);
	F32 weight = computeWeight(0.0f, 0.0f); // Highest weight that this function can give

	// Sample taps
	sampleTex(uv, IVec2(1, 1), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(0, 1), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(-1, 1), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(-1, 0), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(-1, -1), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(0, -1), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(1, -1), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(1, 0), refDepth, ssao, bentNormal, weight);

#	if SPATIAL_DENOISE_QUALITY == 1
	sampleTex(uv, IVec2(2, 2), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(0, 2), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(-2, 2), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(-2, 0), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(-2, -2), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(0, -2), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(2, -2), refDepth, ssao, bentNormal, weight);
	sampleTex(uv, IVec2(2, 0), refDepth, ssao, bentNormal, weight);
#	endif

	ssao /= weight;
	ssao = saturate(ssao);

	bentNormal /= weight;
	bentNormal = normalize(bentNormal);
	bentNormal = mul(g_consts.m_viewToWorldMat, Vec4(bentNormal, 0.0f));

	// Write value
#	if ANKI_COMPUTE_SHADER
	g_bentNormalsAndSsaoStorageTex[svDispatchThreadId] = RVec4(bentNormal, ssao);
#	else
	return RVec4(bentNormal, ssao);
#	endif
}
#endif

// ===========================================================================
// SSAO temporal denoise                                                     =
// ===========================================================================
#if ANKI_TECHNIQUE_SsaoTemporalDenoise && (ANKI_COMPUTE_SHADER || ANKI_FRAGMENT_SHADER)
#	include <AnKi/Shaders/Functions.hlsl>
#	include <AnKi/Shaders/TonemappingFunctions.hlsl>

SamplerState g_linearAnyClampSampler : register(s0);
Texture2D<RVec4> g_bentNormalsAndSsaoTex : register(t0);
Texture2D<RVec4> g_historyBentNormalsAndSsaoTex : register(t1);
Texture2D<Vec4> g_motionVectorsTex : register(t2);

#	if ANKI_COMPUTE_SHADER
RWTexture2D<RVec4> g_bentNormalsAndSsaoStorageTex : register(u0);
#	endif

#	if ANKI_COMPUTE_SHADER
[numthreads(8, 8, 1)] void main(UVec2 svDispatchThreadId : SV_DISPATCHTHREADID)
#	else
RVec4 main(VertOut input) : SV_TARGET0
#	endif
{
#	if ANKI_COMPUTE_SHADER
	Vec2 textureSize;
	U32 mipCount;
	g_bentNormalsAndSsaoTex.GetDimensions(0, textureSize.x, textureSize.y, mipCount);
	const Vec2 uv = (Vec2(svDispatchThreadId) + 0.5f) / textureSize;
#	else
	const Vec2 uv = input.m_uv;
#	endif

	const Vec2 historyUv = uv + g_motionVectorsTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0f).xy;

	// Read textures
	RVec4 history = g_historyBentNormalsAndSsaoTex.SampleLevel(g_linearAnyClampSampler, historyUv, 0.0f);
	RVec4 current = g_bentNormalsAndSsaoTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0f);

	// Remove ghosting by clamping the history color to neighbour's AABB
	const RVec4 near0 = g_bentNormalsAndSsaoTex.SampleLevel(g_linearAnyClampSampler, uv, 0, IVec2(1, 0));
	const RVec4 near1 = g_bentNormalsAndSsaoTex.SampleLevel(g_linearAnyClampSampler, uv, 0, IVec2(0, 1));
	const RVec4 near2 = g_bentNormalsAndSsaoTex.SampleLevel(g_linearAnyClampSampler, uv, 0, IVec2(-1, 0));
	const RVec4 near3 = g_bentNormalsAndSsaoTex.SampleLevel(g_linearAnyClampSampler, uv, 0, IVec2(0, -1));

#	if 0
	const RVec4 boxMin = min(current, min4(near0, near1, near2, near3));
	const RVec4 boxMax = max(current, max4(near0, near1, near2, near3));
#	else
	const RVec4 m1 = current + near0 + near1 + near2 + near3;
	const RVec4 m2 = current * current + near0 * near0 + near1 * near1 + near2 * near2 + near3 * near3;

	const RVec4 mu = m1 / 5.0;
	const RVec4 sigma = sqrt(m2 / 5.0 - mu * mu);

	const F32 varianceClippingGamma = 1.2f;
	const RVec4 boxMin = mu - varianceClippingGamma * sigma;
	const RVec4 boxMax = mu + varianceClippingGamma * sigma;
#	endif

	history = clamp(history, boxMin, boxMax);

	// Final
	const RF32 kBlendFactor = 0.1f;

	const F32 lum0 = computeLuminance(current.xyz) * current.w;
	const F32 lum1 = computeLuminance(history.xyz) * history.w;
	const F32 maxLum = 1.0;

	RF32 diff = abs(lum0 - lum1) / max(lum0, max(lum1, maxLum + kEpsilonF32));
	diff = 1.0 - diff;
	diff = diff * diff;
	const RF32 feedback = lerp(0.0, kBlendFactor, diff);

	RVec4 finalVal = lerp(history, current, feedback);
	finalVal.xyz = normalize(finalVal.xyz);

	// Write value
#	if ANKI_COMPUTE_SHADER
	g_bentNormalsAndSsaoStorageTex[svDispatchThreadId] = finalVal;
#	else
	return finalVal;
#	endif
}
#endif

// ===========================================================================
// Techniques                                                                =
// ===========================================================================
#pragma anki technique_start vert Ssao uses_mutators
#pragma anki technique_end vert Ssao

#pragma anki technique_start frag Ssao uses_mutators
#pragma anki technique_end frag Ssao

#pragma anki technique_start comp Ssao
#pragma anki technique_end comp Ssao

#pragma anki technique_start vert SsaoSpatialDenoise
#pragma anki technique_end vert SsaoSpatialDenoise

#pragma anki technique_start frag SsaoSpatialDenoise
#pragma anki technique_end frag SsaoSpatialDenoise

#pragma anki technique_start comp SsaoSpatialDenoise
#pragma anki technique_end comp SsaoSpatialDenoise

#pragma anki technique_start vert SsaoTemporalDenoise
#pragma anki technique_end vert SsaoTemporalDenoise

#pragma anki technique_start frag SsaoTemporalDenoise
#pragma anki technique_end frag SsaoTemporalDenoise

#pragma anki technique_start comp SsaoTemporalDenoise
#pragma anki technique_end comp SsaoTemporalDenoise
