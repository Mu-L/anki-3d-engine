// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator TECHNIQUE 0 1 // Shdows or MaterialFetch

#pragma anki technique Build comp mutators TECHNIQUE
#pragma anki technique PatchRaygenAndMiss comp mutators

#include <AnKi/Shaders/Include/GpuSceneTypes.h>
#include <AnKi/Shaders/Include/MiscRendererTypes.h>
#include <AnKi/Shaders/Common.hlsl>

// ===========================================================================
// Build                                                                     =
// ===========================================================================
#if NOT_ZERO(ANKI_TECHNIQUE_Build)

StructuredBuffer<GpuSceneRenderable> g_renderables : register(t0);

StructuredBuffer<LodAndRenderableIndex> g_visibleRenderables : register(t1); // 1st element is the count

StructuredBuffer<U32> g_shaderHandles : register(t2);

RWStructuredBuffer<U32> g_sbtBuffer : register(u0);

ANKI_FAST_CONSTANTS(RtShadowsSbtBuildConstants, g_consts)

#	define NUMTHREADS 64

[numthreads(NUMTHREADS, 1, 1)] void main(COMPUTE_ARGS)
{
	if(all(svGroupId == 0))
	{
		// First group copies the raygen and miss handles

		const U32 dword = svGroupIndex;
		if(dword < g_consts.m_shaderHandleDwordSize)
		{
			const U32 raygenHandleDwordOffset = g_consts.m_raygenHandleIndex * g_consts.m_shaderHandleDwordSize + dword;
			SBUFF(g_sbtBuffer, dword) = SBUFF(g_shaderHandles, raygenHandleDwordOffset);

			const U32 missHandleDwordOffset = g_consts.m_missHandleIndex * g_consts.m_shaderHandleDwordSize + dword;
			SBUFF(g_sbtBuffer, dword + g_consts.m_sbtRecordDwordSize) = SBUFF(g_shaderHandles, missHandleDwordOffset);
		}
	}

	const U32 renderableCount = SBUFF(g_visibleRenderables, 0).m_lod_2bit_renderableIndex_30bit;
	if(svDispatchThreadId.x >= renderableCount)
	{
		return;
	}

	const U32 lodAndRenderableIdx = SBUFF(g_visibleRenderables, svDispatchThreadId.x + 1).m_lod_2bit_renderableIndex_30bit;
	const U32 renderableIdx = lodAndRenderableIdx & ((1u << 30) - 1u);
	const U32 lod = lodAndRenderableIdx >> 30u;
	const GpuSceneRenderable renderable = SBUFF(g_renderables, renderableIdx);

	U32 sbtDwordOffset = g_consts.m_sbtRecordDwordSize * 2; // Skip raygen and miss shaders which are first
	sbtDwordOffset += g_consts.m_sbtRecordDwordSize * svDispatchThreadId.x;

	// Copy the handle
	for(U32 i = 0; i < g_consts.m_shaderHandleDwordSize; ++i)
	{
		const U32 shaderHandleIdx = (TECHNIQUE == 0) ? renderable.m_rtShadowsShaderHandleIndex : renderable.m_rtMaterialFetchShaderHandleIndex;
		const U32 offset = shaderHandleIdx * g_consts.m_shaderHandleDwordSize + i;
		SBUFF(g_sbtBuffer, sbtDwordOffset) = SBUFF(g_shaderHandles, offset);
		++sbtDwordOffset;
	}

	// Copy the GpuSceneRenderableInstance
	SBUFF(g_sbtBuffer, sbtDwordOffset++) = renderable.m_worldTransformsIndex;
	SBUFF(g_sbtBuffer, sbtDwordOffset++) = renderable.m_constantsOffset;
	SBUFF(g_sbtBuffer, sbtDwordOffset++) = renderable.m_meshLodsIndex + lod;
	SBUFF(g_sbtBuffer, sbtDwordOffset) = 0;
}
#endif

// ===========================================================================
// PatchRaygenAndMiss                                                        =
// ===========================================================================
#if NOT_ZERO(ANKI_TECHNIQUE_PatchRaygenAndMiss)

StructuredBuffer<U32> g_shaderHandles : register(t0);

RWStructuredBuffer<U32> g_sbtBuffer : register(u0);

ANKI_FAST_CONSTANTS(RtShadowsSbtBuildConstants, g_consts)

// Patches only raygen and miss handles to the SBT
[NumThreads(32, 1, 1)] void main(COMPUTE_ARGS)
{
	const U32 dword = svGroupIndex;
	if(dword < g_consts.m_shaderHandleDwordSize)
	{
		const U32 raygenHandleDwordOffset = g_consts.m_raygenHandleIndex * g_consts.m_shaderHandleDwordSize + dword;
		SBUFF(g_sbtBuffer, dword) = SBUFF(g_shaderHandles, raygenHandleDwordOffset);

		const U32 missHandleDwordOffset = g_consts.m_missHandleIndex * g_consts.m_shaderHandleDwordSize + dword;
		SBUFF(g_sbtBuffer, dword + g_consts.m_sbtRecordDwordSize) = SBUFF(g_shaderHandles, missHandleDwordOffset);
	}
}
#endif
