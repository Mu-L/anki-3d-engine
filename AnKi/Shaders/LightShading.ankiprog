// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki technique vert pixel

#include <AnKi/Shaders/QuadVert.hlsl>

#if ANKI_PIXEL_SHADER
#	include <AnKi/Shaders/PackFunctions.hlsl>
#	include <AnKi/Shaders/Functions.hlsl>
#	include <AnKi/Shaders/RtShadows.hlsl>
#	include <AnKi/Shaders/ClusteredShadingFunctions.hlsl>

ConstantBuffer<GlobalRendererConstants> g_globalConstants : register(b0);
StructuredBuffer<PointLight> g_pointLights : register(t0);
StructuredBuffer<SpotLight> g_spotLights : register(t1);
StructuredBuffer<GlobalIlluminationProbe> g_giProbes : register(t2);
StructuredBuffer<ReflectionProbe> g_reflectionProbes : register(t3);
StructuredBuffer<Cluster> g_clusters : register(t4);

SamplerState g_nearestAnyClampSampler : register(s0);
SamplerState g_trilinearClampSampler : register(s1);

Texture2D<Vec4> g_gbuffer0Tex : register(t5);
Texture2D<Vec4> g_gbuffer1Tex : register(t6);
Texture2D<Vec4> g_gbuffer2Tex : register(t7);
Texture2D g_depthTex : register(t8);
Texture2D<RVec4> g_resolvedShadowsTex : register(t9);
Texture2D<RVec4> g_ssaoTex : register(t10);
Texture2D<RVec4> g_reflectionsTex : register(t11);
Texture2D<RVec4> g_integrationLut : register(t12);

// Common code for lighting
#	define LIGHTING_COMMON_BRDF() \
		const RVec3 frag2Light = light.m_position - worldPos; \
		const RVec3 l = normalize(frag2Light); \
		const RVec3 specC = specularIsotropicLobe(gbuffer.m_normal, gbuffer.m_f0, gbuffer.m_roughness, viewDir, l); \
		const RVec3 diffC = diffuseLobe(gbuffer.m_diffuse); \
		const RF32 att = computeAttenuationFactor(light.m_radius, frag2Light); \
		RF32 lambert = max(0.0, dot(gbuffer.m_normal, l));

RVec4 main(VertOut input) : SV_TARGET0
{
	const Vec2 uv = input.m_uv;
	const Vec2 ndc = uvToNdc(uv);
	const UVec2 coord = input.m_svPosition;
	const F32 depth = g_depthTex[coord].r;

	if(depth == 1.0)
	{
		return 0.0;
	}

	// Get world position
	const Vec4 worldPos4 = mul(g_globalConstants.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, depth, 1.0));
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	const RVec3 viewDir = normalize(g_globalConstants.m_cameraPosition - worldPos);

	// Get the cluster
	Cluster cluster = getClusterFragCoord(g_clusters, g_globalConstants, Vec3(input.m_svPosition.xy, depth));

	// return clusterHeatmap(cluster, 1u << (U32)GpuSceneNonRenderableObjectType::kLight, 3);

	// Decode GBuffer
	GbufferInfo<RF32> gbuffer = (GbufferInfo<RF32>)0;
	unpackGBufferNoVelocity<RF32>(g_gbuffer0Tex[coord], g_gbuffer1Tex[coord], g_gbuffer2Tex[coord], gbuffer);
	gbuffer.m_subsurface = max(gbuffer.m_subsurface, kSubsurfaceMin);

	// Apply SSAO
	const RVec4 ssaoAndBentNormals = g_ssaoTex.SampleLevel(g_trilinearClampSampler, uv, 0.0);
	const RF32 ssao = ssaoAndBentNormals.w;
	const RVec3 bentNormal = ssaoAndBentNormals.xyz;
	gbuffer.m_diffuse *= ssao;

	// Ambient and emissive color
	RVec3 outColor = gbuffer.m_emission;

	// Indirect diffuse
	const RVec3 probeColor = sampleGiProbes<RF32>(cluster, g_giProbes, bentNormal, worldPos, g_trilinearClampSampler);
	outColor += probeColor * gbuffer.m_diffuse;

	// Indirect specular
	{
		RVec3 refl = g_reflectionsTex[coord].xyz;

		// Apply the reflection
		const F32 NoV = max(0.0f, dot(gbuffer.m_normal, viewDir));
		const Vec3 env = specularDFG(gbuffer.m_f0, gbuffer.m_roughness, g_integrationLut, g_trilinearClampSampler, NoV);
		refl *= env;

		outColor += refl;
	}

	// SM
	RVec4 resolvedSm = g_resolvedShadowsTex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0);
	U32 resolvedSmIdx = 0u;

	// Dir light
	const DirectionalLight dirLight = g_globalConstants.m_directionalLight;
	if(dirLight.m_shadowCascadeCount_31bit_active_1bit & 1u)
	{
		RF32 shadowFactor;
		if(dirLight.m_shadowCascadeCount_31bit_active_1bit >> 1u)
		{
			shadowFactor = resolvedSm[0];
			++resolvedSmIdx;
		}
		else
		{
			shadowFactor = 1.0;
		}

		const RVec3 l = -dirLight.m_direction;

		const RF32 lambert = max(gbuffer.m_subsurface, dot(l, gbuffer.m_normal));

		const RVec3 diffC = diffuseLobe(gbuffer.m_diffuse);
		const RVec3 specC = specularIsotropicLobe(gbuffer.m_normal, gbuffer.m_f0, gbuffer.m_roughness, viewDir, l);

		outColor += (diffC + specC) * dirLight.m_diffuseColor * (shadowFactor * lambert);
	}

	// Point lights
	U32 idx;
	[loop] while((idx = iteratePointLights(cluster)) != kMaxU32)
	{
		const PointLight light = g_pointLights[idx];

		LIGHTING_COMMON_BRDF();

		[branch] if(light.m_shadow)
		{
			const RF32 shadow = resolvedSm[resolvedSmIdx++];
			lambert *= shadow;
		}

		outColor += (diffC + specC) * light.m_diffuseColor * (att * max(gbuffer.m_subsurface, lambert));
	}

	// Spot lights
	[loop] while((idx = iterateSpotLights(cluster)) != kMaxU32)
	{
		const SpotLight light = g_spotLights[idx];

		LIGHTING_COMMON_BRDF();

		const F32 spot = computeSpotFactor(l, light.m_outerCos, light.m_innerCos, light.m_direction);

		[branch] if(light.m_shadow)
		{
			const RF32 shadow = resolvedSm[resolvedSmIdx++];
			lambert *= shadow;
		}

		outColor += (diffC + specC) * light.m_diffuseColor * (att * spot * max(gbuffer.m_subsurface, lambert));
	}

	outColor = min(outColor, RVec3(kMaxRF32, kMaxRF32, kMaxRF32));
	return RVec4(outColor, 0.0);
}
#endif // ANKI_PIXEL_SHADER
