// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#include <AnKi/Shaders/QuadVert.hlsl>

#pragma anki technique_start vert
#pragma anki technique_end vert

#pragma anki technique_start pixel
#include <AnKi/Shaders/PackFunctions.hlsl>
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/RtShadows.hlsl>
#include <AnKi/Shaders/ClusteredShadingFunctions.hlsl>

ConstantBuffer<GlobalRendererConstants> g_globalConstants : register(b0);
StructuredBuffer<PointLight> g_pointLights : register(t0);
StructuredBuffer<SpotLight> g_spotLights : register(t1);
StructuredBuffer<GlobalIlluminationProbe> g_giProbes : register(t2);
StructuredBuffer<ReflectionProbe> g_reflectionProbes : register(t3);
StructuredBuffer<Cluster> g_clusters : register(t4);

SamplerState g_nearestAnyClampSampler : register(s0);
SamplerState g_trilinearClampSampler : register(s1);

Texture2D<Vec4> g_gbuffer0Tex : register(t5);
Texture2D<Vec4> g_gbuffer1Tex : register(t6);
Texture2D<Vec4> g_gbuffer2Tex : register(t7);
Texture2D g_depthTex : register(t8);
Texture2D<RVec4> g_resolvedShadowsTex : register(t9);
Texture2D<RVec4> g_ssaoTex : register(t10);
Texture2D<RVec4> g_ssrTex : register(t11);
Texture2D<RVec4> g_integrationLut : register(t12);

// Common code for lighting
#define LIGHTING_COMMON_BRDF() \
	const RVec3 frag2Light = light.m_position - worldPos; \
	const RVec3 l = normalize(frag2Light); \
	const RVec3 specC = specularIsotropicLobe(gbuffer, viewDir, l); \
	const RVec3 diffC = diffuseLobe(gbuffer.m_diffuse); \
	const RF32 att = computeAttenuationFactor(light.m_radius, frag2Light); \
	RF32 lambert = max(0.0, dot(gbuffer.m_normal, l));

RVec3 main(VertOut input) : SV_TARGET0
{
	const Vec2 uv = input.m_uv;
	const F32 depth = g_depthTex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0).r;
	const Vec2 ndc = uvToNdc(uv);

	if(depth == 1.0)
	{
		return RVec3(0.0, 0.0, 0.0);
	}

	// Get world position
	const Vec4 worldPos4 = mul(g_globalConstants.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, depth, 1.0));
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	const RVec3 viewDir = normalize(g_globalConstants.m_cameraPosition - worldPos);

	// Get the cluster
	Cluster cluster = getClusterFragCoord(g_clusters, g_globalConstants, Vec3(input.m_svPosition.xy, depth));

	// return clusterHeatmap(cluster, 1u << (U32)GpuSceneNonRenderableObjectType::kLight, 3);

	// Decode GBuffer
	GbufferInfo gbuffer = (GbufferInfo)0;
	unpackGBufferNoVelocity(g_gbuffer0Tex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0),
							g_gbuffer1Tex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0),
							g_gbuffer2Tex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0), gbuffer);
	gbuffer.m_subsurface = max(gbuffer.m_subsurface, kSubsurfaceMin);

	// Apply SSAO
	const RVec4 ssaoAndBentNormals = g_ssaoTex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0f);
	const RF32 ssao = ssaoAndBentNormals.w;
	const RVec3 bentNormal = ssaoAndBentNormals.xyz;
	gbuffer.m_diffuse *= ssao;

	// Ambient and emissive color
	RVec3 outColor = gbuffer.m_emission;

	// Indirect diffuse
	{
		RVec3 probeColor = Vec3(0.0, 0.0, 0.0);

		const U32 oneProbe = WaveActiveAllTrue(countbits(cluster.m_giProbesMask) == 1);
		if(oneProbe)
		{
			// All subgroups point to the same probe and there is only one probe, do a fast path without blend weight

			const GlobalIlluminationProbe probe = g_giProbes[firstbitlow2(cluster.m_giProbesMask)];

			// Sample
			probeColor =
				sampleGlobalIllumination(worldPos, bentNormal, probe, getBindlessTexture3DRVec4(probe.m_volumeTexture), g_trilinearClampSampler);
		}
		else
		{
			// Zero or more than one probes, do a slow path that blends them together

			F32 totalBlendWeight = kEpsilonF32;

			// Loop probes
			[loop] while(cluster.m_giProbesMask != 0u)
			{
				const U32 idx = U32(firstbitlow2(cluster.m_giProbesMask));
				cluster.m_giProbesMask &= ~(1u << idx);
				const GlobalIlluminationProbe probe = g_giProbes[idx];

				// Compute blend weight
				const F32 blendWeight = computeProbeBlendWeight(worldPos, probe.m_aabbMin, probe.m_aabbMax, probe.m_fadeDistance);
				totalBlendWeight += blendWeight;

				// Sample
				const RVec3 c = sampleGlobalIllumination(worldPos, bentNormal, probe, getBindlessTextureNonUniformIndex3DRVec4(probe.m_volumeTexture),
														 g_trilinearClampSampler);
				probeColor += c * blendWeight;
			}

			// Normalize
			probeColor /= totalBlendWeight;
		}

		outColor += probeColor * gbuffer.m_diffuse;
	}

	// Indirect specular
	{
		const RVec4 ssr = g_ssrTex.SampleLevel(g_trilinearClampSampler, uv, 0.0f);
		RVec3 refl = ssr.xyz;

		[branch] if(ssr.w < 0.9f)
		{
			const Vec3 reflDir = reflect(-viewDir, gbuffer.m_normal);
			const RF32 reflLod = (g_globalConstants.m_reflectionProbesMipCount - 1.0f) * gbuffer.m_roughness;
			RVec3 probeColor = 0.0f;

			const U32 oneProbe = WaveActiveAllTrue(countbits(cluster.m_reflectionProbesMask) == 1);
			if(oneProbe)
			{
				// Only one probe, do a fast path without blend weight

				const ReflectionProbe probe = g_reflectionProbes[firstbitlow2(cluster.m_reflectionProbesMask)];

				// Sample
				const Vec3 cubeUv = intersectProbe(worldPos, reflDir, probe.m_aabbMin, probe.m_aabbMax, probe.m_position);
				probeColor = getBindlessTextureCubeRVec4(probe.m_cubeTexture).SampleLevel(g_trilinearClampSampler, cubeUv, reflLod).rgb;
			}
			else
			{
				// Zero or more than one probes, do a slow path that blends them together

				F32 totalBlendWeight = kEpsilonF32;

				// Loop probes
				[loop] while(cluster.m_reflectionProbesMask != 0u)
				{
					const U32 idx = U32(firstbitlow2(cluster.m_reflectionProbesMask));
					cluster.m_reflectionProbesMask &= ~(1u << idx);
					const ReflectionProbe probe = g_reflectionProbes[idx];

					// Compute blend weight
					const F32 blendWeight = computeProbeBlendWeight(worldPos, probe.m_aabbMin, probe.m_aabbMax, 0.2);
					totalBlendWeight += blendWeight;

					// Sample reflections
					const Vec3 cubeUv = intersectProbe(worldPos, reflDir, probe.m_aabbMin, probe.m_aabbMax, probe.m_position);
					const Vec3 c =
						getBindlessTextureNonUniformIndexCubeRVec4(probe.m_cubeTexture).SampleLevel(g_trilinearClampSampler, cubeUv, reflLod).rgb;
					probeColor += c * blendWeight;
				}

				// Normalize the colors
				probeColor /= totalBlendWeight;
			}

			refl = lerp(probeColor, ssr.xyz, ssr.w);
		}

		// Apply the reflection
		const F32 NoV = max(0.0f, dot(gbuffer.m_normal, viewDir));
		const Vec3 env = specularDFG(gbuffer.m_f0, gbuffer.m_roughness, g_integrationLut, g_trilinearClampSampler, NoV);
		refl *= env;

		outColor += refl;
	}

	// SM
	RVec4 resolvedSm = g_resolvedShadowsTex.SampleLevel(g_trilinearClampSampler, uv, 0.0);
	U32 resolvedSmIdx = 0u;

	// Dir light
	const DirectionalLight dirLight = g_globalConstants.m_directionalLight;
	if(dirLight.m_shadowCascadeCount_31bit_active_1bit & 1u)
	{
		RF32 shadowFactor;
		if(dirLight.m_shadowCascadeCount_31bit_active_1bit >> 1u)
		{
			shadowFactor = resolvedSm[0];
			++resolvedSmIdx;
		}
		else
		{
			shadowFactor = 1.0;
		}

		const RVec3 l = -dirLight.m_direction;

		const RF32 lambert = max(gbuffer.m_subsurface, dot(l, gbuffer.m_normal));

		const RVec3 diffC = diffuseLobe(gbuffer.m_diffuse);
		const RVec3 specC = specularIsotropicLobe(gbuffer, viewDir, l);

		outColor += (diffC + specC) * dirLight.m_diffuseColor * (shadowFactor * lambert);
	}

	// Point lights
	U32 idx;
	[loop] while((idx = iteratePointLights(cluster)) != kMaxU32)
	{
		const PointLight light = g_pointLights[idx];

		LIGHTING_COMMON_BRDF();

		[branch] if(light.m_shadow)
		{
			const RF32 shadow = resolvedSm[resolvedSmIdx++];
			lambert *= shadow;
		}

		outColor += (diffC + specC) * light.m_diffuseColor * (att * max(gbuffer.m_subsurface, lambert));
	}

	// Spot lights
	[loop] while((idx = iterateSpotLights(cluster)) != kMaxU32)
	{
		const SpotLight light = g_spotLights[idx];

		LIGHTING_COMMON_BRDF();

		const F32 spot = computeSpotFactor(l, light.m_outerCos, light.m_innerCos, light.m_direction);

		[branch] if(light.m_shadow)
		{
			const RF32 shadow = resolvedSm[resolvedSmIdx++];
			lambert *= shadow;
		}

		outColor += (diffC + specC) * light.m_diffuseColor * (att * spot * max(gbuffer.m_subsurface, lambert));
	}

	outColor = min(outColor, RVec3(kMaxRF32, kMaxRF32, kMaxRF32));
	return outColor;
}
#pragma anki technique_end pixel
