// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator OBJECT_TYPE 0 1 2 3 4 // Same as GpuSceneNonRenderableObjectType

#pragma anki technique comp

#include <AnKi/Shaders/Include/ClusteredShadingTypes.h>
#include <AnKi/Shaders/Include/GpuSceneTypes.h>

#if OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_LIGHT
typedef LightUnion ClusteredType;
typedef GpuSceneLight GpuSceneType;
#elif OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_DECAL
typedef Decal ClusteredType;
typedef GpuSceneDecal GpuSceneType;
#elif OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_FOG_DENSITY_VOLUME
typedef FogDensityVolume ClusteredType;
typedef GpuSceneFogDensityVolume GpuSceneType;
#elif OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_REFLECTION_PROBE
typedef ReflectionProbe ClusteredType;
typedef GpuSceneReflectionProbe GpuSceneType;
#elif OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_GLOBAL_ILLUMINATION_PROBE
typedef GlobalIlluminationProbe ClusteredType;
typedef GpuSceneGlobalIlluminationProbe GpuSceneType;
#else
#	error See file
#endif

StructuredBuffer<GpuSceneType> g_inBuffer : register(t0);
RWStructuredBuffer<ClusteredType> g_outBuffer : register(u0);
StructuredBuffer<U32> g_visibles : register(t1);

#define THREAD_GROUP_SIZE 64

[numthreads(THREAD_GROUP_SIZE, 1, 1)] void main(UVec3 svDispatchThreadId : SV_DISPATCHTHREADID)
{
	const U32 visibleObjCount = min(g_visibles[0], kMaxVisibleClusteredObjects[OBJECT_TYPE]);
	const U32 idxOut = svDispatchThreadId.x;
	if(idxOut >= visibleObjCount)
	{
		return;
	}

#if OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_LIGHT
	const GpuSceneLight input = g_inBuffer[g_visibles[idxOut + 1]];

	const Bool isPoint = ((U32)input.m_flags & (U32)GpuSceneLightFlag::kPointLight) ? true : false;

	LightUnion output = (LightUnion)0;
	output.m_position = input.m_position;
	output.m_radius = input.m_radius;

	output.m_diffuseColor = input.m_diffuseColor;
	output.m_lightType = (isPoint) ? 0 : 1;

	output.m_shadow = ((U32)input.m_flags & (U32)GpuSceneLightFlag::kShadow) ? 1 : 0;
	output.m_innerCos = input.m_innerCos;
	output.m_outerCos = input.m_outerCos;

	output.m_direction = input.m_direction;
	output.m_shadowAtlasTileScale = input.m_spotLightMatrixOrPointLightUvViewports[0].z; // Scale should be the same for all

	for(U32 i = 0; i < 6; ++i)
	{
		output.m_spotLightMatrixOrPointLightUvViewports[i] = input.m_spotLightMatrixOrPointLightUvViewports[i];
	}

	g_outBuffer[idxOut] = output;
#else
	g_outBuffer[idxOut] = g_inBuffer[g_visibles[idxOut + 1]];
#endif
}
