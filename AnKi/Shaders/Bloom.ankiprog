// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#include <AnKi/Shaders/QuadVert.hlsl>
#if ANKI_COMPUTE_SHADER || ANKI_PIXEL_SHADER
#	include <AnKi/Shaders/TonemappingFunctions.hlsl>
#	include <AnKi/Shaders/Functions.hlsl>

SamplerState g_linearAnyClampSampler : register(s0);
Texture2D<RVec4> g_inTex : register(t0);

#	define TONEMAPPING_REGISTER u0
#	include <AnKi/Shaders/TonemappingResources.hlsl>

struct Consts
{
	RF32 m_threshold;
	F32 m_scale;
	F32 m_padding0;
	F32 m_padding1;
};
ANKI_FAST_CONSTANTS(Consts, g_consts)

#	if ANKI_COMPUTE_SHADER
#		define THREADGROUP_SIZE_X 8
#		define THREADGROUP_SIZE_Y 8
RWTexture2D<RVec4> g_storageTex : register(u1);
#	endif

#	if ANKI_COMPUTE_SHADER
[numthreads(THREADGROUP_SIZE_X, THREADGROUP_SIZE_Y, 1)] void main(UVec2 svDispatchThreadId : SV_DISPATCHTHREADID)
#	else
RVec3 main(VertOut input) : SV_TARGET0
#	endif
{
#	if ANKI_COMPUTE_SHADER
	Vec2 imgSize;
	g_storageTex.GetDimensions(imgSize.x, imgSize.y);

	const Vec2 uv = (Vec2(svDispatchThreadId) + 0.5) / imgSize;
#	else
	const Vec2 uv = input.m_uv;
#	endif

	const RF32 weight = 1.0 / 5.0;
	RVec3 color = g_inTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).rgb * weight;
	color += g_inTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0, IVec2(+1, +1)).rgb * weight;
	color += g_inTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0, IVec2(-1, -1)).rgb * weight;
	color += g_inTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0, IVec2(-1, +1)).rgb * weight;
	color += g_inTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0, IVec2(+1, -1)).rgb * weight;

	color = tonemap(color, readExposureAndAverageLuminance().y, g_consts.m_threshold) * g_consts.m_scale;

#	if ANKI_COMPUTE_SHADER
	g_storageTex[svDispatchThreadId] = RVec4(color, 0.0);
#	else
	return color;
#	endif
}
#endif // ANKI_COMPUTE_SHADER || ANKI_PIXEL_SHADER

#pragma anki technique_start vert
#pragma anki technique_end vert

#pragma anki technique_start pixel
#pragma anki technique_end pixel

#pragma anki technique_start comp
#pragma anki technique_end comp
