// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki technique RtMaterialFetch rgen miss

#include <AnKi/Shaders/RtMaterialFetch.hlsl>
#include <AnKi/Shaders/Include/GpuSceneTypes.h>
#include <AnKi/Shaders/PackFunctions.hlsl>
#include <AnKi/Shaders/LightFunctions.hlsl>
#include <AnKi/Shaders/ImportanceSampling.hlsl>

// ===========================================================================
// RayGen                                                                    =
// ===========================================================================
#if ANKI_RAY_GEN_SHADER

#	define SPACE space2

ConstantBuffer<GlobalRendererConstants> g_globalRendererConstants : register(b0, SPACE);

RaytracingAccelerationStructure g_tlas : register(t0, SPACE);
Texture2D<Vec4> g_depthTex : register(t1, SPACE);
Texture2D<Vec4> g_gbufferRt1 : register(t2, SPACE);
Texture2D<Vec4> g_gbufferRt2 : register(t3, SPACE);
Texture2D<Vec4> g_blueNoiseTex : register(t4, SPACE);

RWTexture2D<Vec4> g_outTex : register(u0, SPACE);

[shader("raygeneration")] void main()
{
	UVec2 outSize;
	g_outTex.GetDimensions(outSize.x, outSize.y);

	const F32 depth = g_depthTex[DispatchRaysIndex().xy].x;
	const Vec4 rt1 = g_gbufferRt1[DispatchRaysIndex().xy];
	const Vec4 rt2 = g_gbufferRt2[DispatchRaysIndex().xy];

	const Vec3 worldNormal = unpackNormalFromGBuffer(rt2);
	const F32 roughness = unpackRoughnessFromGBuffer(rt1);

	const Vec2 ndc = uvToNdc(Vec2(DispatchRaysIndex().xy) / Vec2(outSize));
	const Vec4 v4 = mul(g_globalRendererConstants.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, depth, 1.0));
	const Vec3 worldPos = v4.xyz / v4.w;

	const DirectionalLight dirLight = g_globalRendererConstants.m_directionalLight;

	// Noise
	Vec2 randFactors;
	if(true)
	{
		UVec2 noiseTexSize;
		g_blueNoiseTex.GetDimensions(noiseTexSize.x, noiseTexSize.y);

		Vec3 random = g_blueNoiseTex[DispatchRaysIndex().xy % noiseTexSize].rgb;
		random = animateBlueNoise(random, g_globalRendererConstants.m_frame % 16u);
		randFactors = random.xy;
	}
	else
	{
		randFactors = spatioTemporalNoise(DispatchRaysIndex().xy, g_globalRendererConstants.m_frame);
	}

	// Compute refl
	const Vec3 viewDir = normalize(g_globalRendererConstants.m_cameraPosition - worldPos);
#	if 1
	F32 pdf;
	const Vec3 reflDir = sampleReflectionVector(viewDir, worldNormal, roughness, randFactors, 4, pdf);
#	else
	ANKI_MAYBE_UNUSED(roughness);
	const Vec3 reflDir = reflect(-viewDir, worldNormal);
#	endif

	// Trace
	RtMaterialFetchRayPayload payload;
	payload = (RtMaterialFetchRayPayload)0;
	constexpr U32 flags = RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES;
	const U32 sbtRecordOffset = 0u;
	const U32 sbtRecordStride = 0u;
	const U32 missIndex = 0u;
	const U32 cullMask = 0xFFu;
	RayDesc ray;
	ray.Origin = worldPos;
	ray.TMin = 0.1;
	ray.Direction = reflDir;
	ray.TMax = 100.0; // TODO
	TraceRay(g_tlas, flags, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, ray, payload);

	// Trace shadow
	F32 shadow;
	if(payload.m_rayT > 0.0)
	{
		constexpr U32 qFlags = RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH;
		RayQuery<qFlags> q;
		RayDesc ray;
		ray.Origin = worldPos + reflDir * (payload.m_rayT - 0.01);
		ray.TMin = 0.1;
		ray.Direction = -dirLight.m_direction;
		ray.TMax = 100.0; // TODO
		q.TraceRayInline(g_tlas, qFlags, cullMask, ray);
		q.Proceed();
		shadow = (q.CommittedStatus() == COMMITTED_TRIANGLE_HIT) ? 0.0 : 1.0;
	}
	else
	{
		shadow = 1.0;
	}

	// Do simple light shading
	Vec3 outColor = payload.m_emission;
	outColor += payload.m_diffuseColor * 0.3;
	const Vec3 l = -dirLight.m_direction;
	const F32 lambert = dot(l, payload.m_worldNormal);
	const Vec3 diffC = diffuseLobe(payload.m_diffuseColor);
	outColor += diffC * dirLight.m_diffuseColor * lambert * shadow;

	// g_outTex[DispatchRaysIndex().xy] = Vec4(outColor, 0.0);
	g_outTex[DispatchRaysIndex().xy] = lerp(Vec4(outColor, 0.0), g_outTex[DispatchRaysIndex().xy], 0.95);
}
#endif // ANKI_RAY_GEN_SHADER

// ===========================================================================
// Miss                                                                      =
// ===========================================================================
#if ANKI_MISS_SHADER
[shader("miss")] void main(inout RtMaterialFetchRayPayload payload)
{
	payload.m_diffuseColor = 0.0;
	payload.m_worldNormal = 0.0;
	payload.m_emission = Vec3(0.0, 0.0, 0.5); // TODO
	payload.m_rayT = -1.0;
}
#endif // ANKI_MISS_SHADER
