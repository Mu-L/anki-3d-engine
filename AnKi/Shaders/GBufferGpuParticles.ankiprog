// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#include <AnKi/Shaders/MaterialShadersCommon.hlsl>

#pragma anki struct AnKiLocalConstants
#pragma anki member RVec3 m_diffColor
#pragma anki member RF32 m_roughness
#pragma anki member RVec3 m_specColor
#pragma anki member RF32 m_metallic
#pragma anki member RVec3 m_initialEmission
#pragma anki member RVec3 m_finalEmission
#pragma anki struct_end

struct VertIn
{
	U32 m_svVertexId : SV_VERTEXID;
	UVec4 m_gpuSceneRenderable : MISC0;
};

struct VertOut
{
	nointerpolation Vec2 m_velocity : VELOCITY;
	nointerpolation RF32 m_lifeFactor : LIFE_FACTOR;
	nointerpolation U32 m_constantsOffset : CONSTANTS_OFFSET;
	Vec4 m_svPosition : SV_POSITION;
};

struct PixelOut
{
	Vec4 m_color0 : SV_TARGET0;
	Vec4 m_color1 : SV_TARGET1;
	Vec4 m_color2 : SV_TARGET2;
	Vec2 m_color3 : SV_TARGET3;
};

#pragma anki technique_start vert GBuffer

VertOut main(VertIn input)
{
	VertOut output;

	const GpuSceneRenderableInstance renderable = unpackGpuSceneRenderableVertex(input.m_gpuSceneRenderable);
	const GpuSceneParticleEmitter particles = g_particleEmitters[renderable.m_boneTransformsOffsetOrParticleEmitterIndex];

	// Read vertex
	const U32 particleId = input.m_svVertexId;
	U32 offset = particles.m_vertexOffsets[(U32)VertexStreamId::kParticlePosition] + particleId * sizeof(Vec3);
	const Vec3 pos = g_gpuScene.Load<Vec3>(offset);

	offset = particles.m_vertexOffsets[(U32)VertexStreamId::kParticlePreviousPosition] + particleId * sizeof(Vec3);
	const Vec3 prevPos = g_gpuScene.Load<Vec3>(offset);

	offset = particles.m_vertexOffsets[(U32)VertexStreamId::kParticleLife] + particleId * sizeof(F32);
	const F32 life = g_gpuScene.Load<F32>(offset);

	offset = particles.m_vertexOffsets[(U32)VertexStreamId::kParticleStartingLife] + particleId * sizeof(F32);
	const F32 startingLife = g_gpuScene.Load<F32>(offset);

	// Position
	const Vec4 clipPos = mul(g_globalConstants.m_viewProjectionMatrix, Vec4(pos, 1.0));
	const Vec4 prevClipPos = mul(g_globalConstants.m_viewProjectionMatrix, Vec4(prevPos, 1.0));

	output.m_svPosition = clipPos;

	// Velocity
	const Vec2 ndc = clipPos.xy / clipPos.w;
	const Vec2 prevNdc = prevClipPos.xy / prevClipPos.w;
	output.m_velocity = (prevNdc - ndc) * 0.5; // It's the opt ver of: ndcToUv(prevNdc) - ndcToUv(ndc)

	// Misc
	output.m_lifeFactor = saturate(1.0 - (life / startingLife));
	output.m_constantsOffset = renderable.m_constantsOffset;

	return output;
}
#pragma anki technique_end vert GBuffer

#pragma anki technique_start pixel GBuffer
#include <AnKi/Shaders/PackFunctions.hlsl>

PixelOut main(VertOut input)
{
	PixelOut output;
	const AnKiLocalConstants localConstants = loadAnKiLocalConstants(g_gpuScene, input.m_constantsOffset);

	GbufferInfo g;
	g.m_diffuse = localConstants.m_diffColor;

	const Mat3x4 camTrf = g_globalConstants.m_cameraTransform;
	g.m_normal = normalize(Vec3(camTrf.m_row0[2], camTrf.m_row1[2], camTrf.m_row2[2]));

	g.m_f0 = localConstants.m_specColor;
	g.m_roughness = localConstants.m_roughness;
	g.m_subsurface = 0.0;
	g.m_emission = lerp(localConstants.m_initialEmission, localConstants.m_finalEmission, input.m_lifeFactor);
	g.m_metallic = localConstants.m_metallic;
	g.m_velocity = input.m_velocity;
	packGBuffer(g, output.m_color0, output.m_color1, output.m_color2, output.m_color3);
	return output;
}
#pragma anki technique_end pixel GBuffer
