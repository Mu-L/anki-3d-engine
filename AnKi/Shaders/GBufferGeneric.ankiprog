// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator ANKI_VELOCITY 0 1
#pragma anki mutator ANKI_BONES 0 1
#pragma anki mutator DIFFUSE_TEX 0 1
#pragma anki mutator SPECULAR_TEX 0 1
#pragma anki mutator ROUGHNESS_METALNESS_TEX 0 1
#pragma anki mutator NORMAL_TEX 0 1
#pragma anki mutator PARALLAX 0 1
#pragma anki mutator EMISSIVE_TEX 0 1
#pragma anki mutator ALPHA_TEST 0 1

#pragma anki skip_mutation ALPHA_TEST 1 DIFFUSE_TEX 0

#include <AnKi/Shaders/Include/MaterialTypes.h>
#include <AnKi/Shaders/Include/GpuSceneFunctions.h>
#include <AnKi/Shaders/PackFunctions.hlsl>
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/MaterialShadersCommon.hlsl>
#include <AnKi/Shaders/RtShadows.hlsl>

// Define a few things to avoid compilation errors
#if ANKI_TECHNIQUE_RtShadows && ANKI_CLOSEST_HIT_SHADER
#	define ALPHA_TEST 0
#	define DIFFUSE_TEX 0
#	define ANKI_VELOCITY 0
#	define ANKI_BONES 0
#	define PARALLAX 0
#endif

#if ANKI_TECHNIQUE_RtShadows && ANKI_ANY_HIT_SHADER
#	define ANKI_VELOCITY 0
#	define ANKI_BONES 0
#	define PARALLAX 0
#endif

#if ANKI_TASK_SHADER
#	define ALPHA_TEST 0
#	define DIFFUSE_TEX 0
#	define ANKI_VELOCITY 0
#	define ANKI_BONES 0
#	define PARALLAX 0
#endif

// General defines
#define GBUFFER (ANKI_TECHNIQUE_GBufferLegacy || ANKI_TECHNIQUE_GBufferMeshShaders || ANKI_TECHNIQUE_GBufferSwMeshletRendering)
#define REALLY_ALPHA_TEST (ALPHA_TEST && DIFFUSE_TEX)
#define UVS (GBUFFER || REALLY_ALPHA_TEST)
#define REALLY_VELOCITY ((ANKI_VELOCITY || ANKI_BONES) && GBUFFER)
#define REALLY_USING_PARALLAX (PARALLAX == 1 && GBUFFER && ALPHA_TEST == 0)
#if GBUFFER
#	define NORMAL_MAPPING (NORMAL_TEX == 1)
#else
#	define NORMAL_MAPPING 0
#endif
#define SW_MESHLETS (ANKI_TECHNIQUE_GBufferSwMeshletRendering || ANKI_TECHNIQUE_ShadowsSwMeshletRendering)

#define VISUALIZE_MESHLETS (0 && GBUFFER)
#define MESHLET_BACKFACE_CULLING 0
#define MESHLET_OUTSIDE_OF_SCREEN_CULLING 1
#define MESHLET_NO_SAMPLING_POINT_CULLING 1
#define MESHLET_HZB_CULLING 1
#define PRIMITIVE_BACKFACE_CULLING 1
#define PRIMITIVE_NO_SAMPLING_POINTS_CULLING 1
#define PRIMITIVE_ANY_CULLING (PRIMITIVE_BACKFACE_CULLING || PRIMITIVE_NO_SAMPLING_POINTS_CULLING)

#pragma anki struct AnKiLocalConstants

#pragma anki member U32 m_diffuseTex
#pragma anki member U32 m_normalTex
#pragma anki member U32 m_roughnessMetalnessTex
#pragma anki member U32 m_specularTex
#pragma anki member U32 m_emissiveTex
#pragma anki member U32 m_heightTex

#pragma anki member RVec4 m_diffuseScale
#pragma anki member RF32 m_roughnessScale
#pragma anki member RF32 m_metalnessScale
#pragma anki member RVec3 m_specularScale
#pragma anki member RVec3 m_emissionScale
#pragma anki member RF32 m_heightmapScale
#pragma anki member RF32 m_subsurface

#pragma anki struct_end

struct VertIn
{
	U32 m_svVertexId : SV_VERTEXID;
	UVec4 m_instanceData : MISC0;
};

struct VertOut
{
	Vec4 m_svPosition : SV_POSITION;

#if UVS
	Vec2 m_uv : TEXCOORD;
#endif

#if REALLY_VELOCITY
	Vec3 m_prevClipXyw : PREV_CLIP;
	Vec3 m_crntClipXyw : CRNT_CLIP;
#endif

#if NORMAL_MAPPING
	Vec3 m_worldPos : WORLD_POS;
#endif

#if GBUFFER
	RVec3 m_normal : NORMAL;
#endif

#if VISUALIZE_MESHLETS
	nointerpolation U32 m_meshletIndex : MESHLET_INDEX;
#endif

	nointerpolation U32 m_constantsOffset : UNIS_OFFSET;
};

struct MeshPerVertOut
{
	Vec4 m_svPosition : SV_POSITION;

#if UVS
	Vec2 m_uv : TEXCOORD;
#endif

#if REALLY_VELOCITY
	Vec3 m_prevClipXyw : PREV_CLIP;
	Vec3 m_crntClipXyw : CRNT_CLIP;
#endif

#if NORMAL_MAPPING
	Vec3 m_worldPos : WORLD_POS;
#endif

#if GBUFFER
	RVec3 m_normal : NORMAL;
#endif
};

struct MeshPerPrimitiveOut
{
	U32 m_constantsOffset : UNIS_OFFSET;

#if VISUALIZE_MESHLETS
	U32 m_meshletIndex : MESHLET_INDEX;
#endif

	Bool m_cullPrimitive : SV_CULLPRIMITIVE;
};

struct FragOut
{
	Vec4 m_color0 : SV_TARGET0;
	Vec4 m_color1 : SV_TARGET1;
	Vec4 m_color2 : SV_TARGET2;
	Vec2 m_color3 : SV_TARGET3;
};

struct Mat3x4_2
{
	Mat3x4 m_a;
	Mat3x4 m_b;
};

#if ANKI_BONES
Mat3x4_2 loadBoneTransforms(UnpackedMeshVertex vert, U32 boneTransformsOffset, U32 index)
{
	const U32 boneIdx = vert.m_boneIndices[index];
	U32 byteOffset = boneTransformsOffset;
	byteOffset += boneIdx * sizeof(Mat3x4) * 2;
	return g_gpuScene.Load<Mat3x4_2>(byteOffset);
}

void skinning(UnpackedMeshVertex vert, U32 boneTransformsOffset, inout Vec3 pos, inout Vec3 prevPos, inout RVec3 normal)
{
	Mat3x4_2 mats = loadBoneTransforms(vert, boneTransformsOffset, 0);

	Mat3x4 skinMat = mats.m_a * vert.m_boneWeights[0];
	Mat3x4 prevSkinMat = mats.m_b * vert.m_boneWeights[0];

	[unroll] for(U32 i = 1u; i < 4u; ++i)
	{
		mats = loadBoneTransforms(vert, boneTransformsOffset, i);

		skinMat = skinMat + mats.m_a * vert.m_boneWeights[i];
		prevSkinMat = prevSkinMat + mats.m_b * vert.m_boneWeights[i];
	}

#	if GBUFFER
	prevPos = mul(prevSkinMat, Vec4(pos, 1.0)).xyz;
	normal = mul(skinMat, Vec4(normal, 0.0)).xyz;
#	endif
	ANKI_MAYBE_UNUSED(prevPos);
	ANKI_MAYBE_UNUSED(normal);

	pos = mul(skinMat, Vec4(pos, 1.0)).xyz;
}
#endif

#if REALLY_VELOCITY
void velocity(Mat3x4 worldTransform, Mat3x4 prevWorldTransform, Vec3 prevLocalPos, Vec4 svPosition, out Vec3 prevClipXyw, out Vec3 crntClipXyw)
{
	ANKI_MAYBE_UNUSED(prevWorldTransform);
	ANKI_MAYBE_UNUSED(worldTransform);

#	if ANKI_VELOCITY
	// Object is also moving
	const Mat3x4 trf = prevWorldTransform;
#	else
	// Object is a skin that is not moving
	const Mat3x4 trf = worldTransform;
#	endif

	Vec4 v4 = Vec4(mul(trf, Vec4(prevLocalPos, 1.0)), 1.0);
	v4 = mul(g_globalConstants.m_previousViewProjectionMatrix, v4);

	prevClipXyw = v4.xyw;
	crntClipXyw = svPosition.xyw;
}
#endif

// ===========================================================================
// Vert                                                                      =
// ===========================================================================
#if ANKI_VERTEX_SHADER

VertOut main(VertIn input)
{
	VertOut output;

#	if SW_MESHLETS
	const GpuSceneMeshletInstance instance = unpackGpuSceneMeshletInstance(input.m_instanceData);

	if(input.m_svVertexId >= (instance.m_worldTransformsIndex_25bit_meshletPrimitiveCount_7bit & ((1u << 7u) - 1u)) * 3u)
	{
		// Discard the primitive
		output = (VertOut)0;
		output.m_svPosition = kNaN;
		return output;
	}

	const MeshletGeometryDescriptor meshlet = g_meshletGeometryDescriptors[instance.m_meshletGeometryDescriptorIndex];

	// Indices are stored in R8G8B8A8_Uint per primitive. Last component is not used. Instead of reading 4 bytes use the code bellow to read just 1.
	// Find prev version in an older commit
	const U32 componentsPerPrimitive = 4u;
	const F32 offset = floor(F32(input.m_svVertexId) / 3.0f) * F32(componentsPerPrimitive) + fmod(F32(input.m_svVertexId), 3.0f);
	const U32 localIdx = g_unifiedGeom_R8_Uint[meshlet.m_firstPrimitive * componentsPerPrimitive + U32(offset)];

	UnpackedMeshVertex vert = loadVertex(meshlet, localIdx, ANKI_BONES);

	const U32 constantsOffset = instance.m_constantsOffset;
	const U32 worldTransformsIndex = instance.m_worldTransformsIndex_25bit_meshletPrimitiveCount_7bit >> 7u;
	const U32 boneTransformsOffset = instance.m_boneTransformsOffsetOrParticleEmitterIndex;

#		if VISUALIZE_MESHLETS
	output.m_meshletIndex = instance.m_meshletGeometryDescriptorIndex;
#		endif

#	else
	const GpuSceneRenderableInstance instance = unpackGpuSceneRenderableVertex(input.m_instanceData);
	const GpuSceneMeshLod mesh = g_meshLods[instance.m_meshLodIndex];
	UnpackedMeshVertex vert = loadVertex(mesh, input.m_svVertexId, ANKI_BONES);

	const U32 constantsOffset = instance.m_constantsOffset;
	const U32 worldTransformsIndex = instance.m_worldTransformsIndex;
	const U32 boneTransformsOffset = instance.m_boneTransformsOffsetOrParticleEmitterIndex;
#	endif // SW_MESHLETS
	ANKI_MAYBE_UNUSED(boneTransformsOffset);

	const Mat3x4 worldTransform = g_transforms[worldTransformsIndex];
	const Mat3x4 prevWorldTransform = g_transforms[worldTransformsIndex + 1u];
	ANKI_MAYBE_UNUSED(prevWorldTransform);

#	if UVS
	output.m_uv = vert.m_uv;
#	endif
	Vec3 prevPos = vert.m_position;
	ANKI_MAYBE_UNUSED(prevPos);
	output.m_constantsOffset = constantsOffset;

	// Do stuff
#	if ANKI_BONES
	skinning(vert, boneTransformsOffset, vert.m_position, prevPos, vert.m_normal);
#	endif

	const Vec3 worldPos = mul(worldTransform, Vec4(vert.m_position, 1.0));
	output.m_svPosition = mul(g_globalConstants.m_viewProjectionMatrix, Vec4(worldPos, 1.0));

#	if NORMAL_MAPPING
	output.m_worldPos = worldPos;
#	endif

#	if GBUFFER
	output.m_normal = mul(worldTransform, Vec4(vert.m_normal, 0.0));
#	endif

#	if REALLY_VELOCITY
	velocity(worldTransform, prevWorldTransform, prevPos, output.m_svPosition, output.m_prevClipXyw, output.m_crntClipXyw);
#	endif

	return output;
};
#endif // ANKI_VERTEX_SHADER

// ===========================================================================
// Mesh                                                                      =
// ===========================================================================
#if ANKI_MESH_SHADER
#	if PRIMITIVE_ANY_CULLING
groupshared Vec2 s_windowCoords[kMaxVerticesPerMeshlet];
groupshared F32 s_clipW[kMaxVerticesPerMeshlet];
#	endif

constexpr int g_trick = 0; // Trick the formatter

[numthreads(ANKI_MESH_SHADER_THREADGROUP_SIZE, 1, 1)] [outputtopology("triangle")] void
main(U32 svGroupId : SV_GROUPID, U32 svGroupIndex : SV_GROUPINDEX, out vertices MeshPerVertOut verts[kMaxVerticesPerMeshlet],
	 out primitives MeshPerPrimitiveOut primitives[kMaxPrimitivesPerMeshlet], out indices UVec3 indices[kMaxPrimitivesPerMeshlet])
{
	const U32 instanceIdx = g_firstMeshlet[g_consts.m_bucketIndex] + svGroupId;

	const GpuSceneMeshletInstance instance = g_meshletInstances[instanceIdx];
	const U32 constantsOffset = instance.m_constantsOffset;
	const U32 worldTransformsIndex = instance.m_worldTransformsIndex_25bit_meshletPrimitiveCount_7bit >> 7u;
	const U32 boneTransformsOffset = instance.m_boneTransformsOffsetOrParticleEmitterIndex;
	ANKI_MAYBE_UNUSED(boneTransformsOffset);

	const MeshletGeometryDescriptor meshlet = g_meshletGeometryDescriptors[instance.m_meshletGeometryDescriptorIndex];
	const U32 primCount = meshlet.m_primitiveCount_R16_Uint_vertexCount_R16_Uint >> 16u;
	const U32 vertCount = meshlet.m_primitiveCount_R16_Uint_vertexCount_R16_Uint & 0xFFFFu;

	SetMeshOutputCounts(vertCount, primCount);

	// Write the verts
	const U32 vertLoopCount = kMaxVerticesPerMeshlet / ANKI_MESH_SHADER_THREADGROUP_SIZE;
	[unroll] for(U32 l = 0; l < vertLoopCount; ++l)
	{
		const U32 idx = l * ANKI_MESH_SHADER_THREADGROUP_SIZE + svGroupIndex;

		if(idx < vertCount)
		{
			MeshPerVertOut output;

			UnpackedMeshVertex vert = loadVertex(meshlet, idx, ANKI_BONES);

			const Mat3x4 worldTransform = g_transforms[worldTransformsIndex];
			const Mat3x4 prevWorldTransform = g_transforms[worldTransformsIndex + 1u];
			ANKI_MAYBE_UNUSED(prevWorldTransform);

#	if UVS
			output.m_uv = vert.m_uv;
#	endif
			Vec3 prevPos = vert.m_position;
			ANKI_MAYBE_UNUSED(prevPos);

			// Do stuff
#	if ANKI_BONES
			skinning(vert, boneTransformsOffset, vert.m_position, prevPos, vert.m_normal);
#	endif

			const Vec3 worldPos = mul(worldTransform, Vec4(vert.m_position, 1.0));
			output.m_svPosition = mul(g_globalConstants.m_viewProjectionMatrix, Vec4(worldPos, 1.0f));
#	if PRIMITIVE_ANY_CULLING
			s_windowCoords[idx] = ndcToUv(output.m_svPosition.xy / output.m_svPosition.w) * g_globalConstants.m_viewport.zw;
			s_clipW[idx] = output.m_svPosition.w;
#	endif

#	if NORMAL_MAPPING
			output.m_worldPos = worldPos;
#	endif

#	if GBUFFER
			output.m_normal = mul(worldTransform, Vec4(vert.m_normal, 0.0));
#	endif

#	if REALLY_VELOCITY
			velocity(worldTransform, prevWorldTransform, prevPos, output.m_svPosition, output.m_prevClipXyw, output.m_prevClipXyw);
#	endif

			verts[idx] = output;
		}
	}

#	if PRIMITIVE_ANY_CULLING
	GroupMemoryBarrierWithGroupSync();
#	endif

	// Write the primitive data
	const U32 primLoopCount = (kMaxPrimitivesPerMeshlet + ANKI_MESH_SHADER_THREADGROUP_SIZE - 1u) / ANKI_MESH_SHADER_THREADGROUP_SIZE;
	[unroll] for(U32 l = 0; l < primLoopCount; ++l)
	{
		const U32 idx = l * ANKI_MESH_SHADER_THREADGROUP_SIZE + svGroupIndex;

		if(idx < primCount)
		{
			const UVec3 prim = g_unifiedGeom_R8G8B8A8_Uint[meshlet.m_firstPrimitive + idx].xyz;
			indices[idx] = prim;

#	if PRIMITIVE_ANY_CULLING
			Bool cull = false;

			const Vec2 a = s_windowCoords[prim.x];
			const Vec2 b = s_windowCoords[prim.y];
			const Vec2 c = s_windowCoords[prim.z];
#	endif

#	if PRIMITIVE_BACKFACE_CULLING
			const Vec2 eb = c - a;
			const Vec2 ec = b - a;

			cull = cull || (eb.x * ec.y >= eb.y * ec.x);
#	endif

#	if PRIMITIVE_NO_SAMPLING_POINTS_CULLING
			const Vec2 windowCoordsMin = min3(a, b, c);
			const Vec2 windowCoordsMax = max3(a, b, c);

			cull = cull || any(round(windowCoordsMin) == round(windowCoordsMax));
#	endif

#	if PRIMITIVE_ANY_CULLING
			// The computations above are only valid if all vertices are in front of perspective plane
			cull = cull && min3(s_clipW[prim.x], s_clipW[prim.y], s_clipW[prim.z]) > 0.0f;

			primitives[idx].m_cullPrimitive = cull;
#	endif

			primitives[idx].m_constantsOffset = constantsOffset;
#	if VISUALIZE_MESHLETS
			primitives[idx].m_meshletIndex = relativeMeshletIdx;
#	endif
		}
	}
}
#endif // ANKI_MESH_SHADER

// ===========================================================================
// Frag                                                                      =
// ===========================================================================
#if ANKI_FRAGMENT_SHADER

#	if SW_MESHLETS
#		define BINDLESS(x) getBindlessTextureNonUniformIndex2DRVec4(x)
#	else
#		define BINDLESS(x) getBindlessTexture2DRVec4(x)
#	endif

#	if !GBUFFER && !REALLY_ALPHA_TEST // Shadows without alpha

void main()
{
}

#	elif !GBUFFER && REALLY_ALPHA_TEST // Shadows WITH alpha

void main(
#		if ANKI_TECHNIQUE_ShadowsMeshShaders
	MeshPerVertOut vertInput, MeshPerPrimitiveOut primInput
#		else
	VertOut vertInput
#		endif
)
{
#		if ANKI_TECHNIQUE_ShadowsMeshShaders
	const U32 constantsOffset = primInput.m_constantsOffset;
#		else
	const U32 constantsOffset = vertInput.m_constantsOffset;
#		endif

	const AnKiLocalConstants localConstants = loadAnKiLocalConstants(g_gpuScene, constantsOffset);
	const RVec4 diffColorA = BINDLESS(localConstants.m_diffuseTex).Sample(g_globalSampler, vertInput.m_uv);
	if(diffColorA.a * localConstants.m_diffuseScale.a < 0.5f)
	{
		discard;
	}
}

#	else // GBUFFER

FragOut main(
#		if ANKI_TECHNIQUE_GBufferMeshShaders
	MeshPerVertOut vertInput, MeshPerPrimitiveOut primInput
#		else
	VertOut vertInput
#		endif
)
{
#		if ANKI_TECHNIQUE_GBufferMeshShaders
	const U32 constantsOffset = primInput.m_constantsOffset;
#		else
	const U32 constantsOffset = vertInput.m_constantsOffset;
#		endif

	const AnKiLocalConstants localConstants = loadAnKiLocalConstants(g_gpuScene, constantsOffset);

#		if REALLY_USING_PARALLAX
	// TODO
	const Vec2 uv = vertInput.m_uv;
#		else
	const Vec2 uv = vertInput.m_uv;
#		endif
	ANKI_MAYBE_UNUSED(uv);

#		if DIFFUSE_TEX
	const RVec4 diffColorA = BINDLESS(localConstants.m_diffuseTex).Sample(g_globalSampler, uv) * localConstants.m_diffuseScale;
	const RVec3 diffColor = diffColorA.rgb;
#			if REALLY_ALPHA_TEST
	if(diffColorA.a < 0.5f)
	{
		discard;
	}
#			endif
#		else
	const RVec3 diffColor = localConstants.m_diffuseScale;
#		endif

#		if SPECULAR_TEX
	const RVec3 specColor = BINDLESS(localConstants.m_specularTex).Sample(g_globalSampler, uv).rgb * localConstants.m_specularScale;
#		else
	const RVec3 specColor = localConstants.m_specularScale;
#		endif

#		if ROUGHNESS_METALNESS_TEX
	const RVec3 comp = BINDLESS(localConstants.m_roughnessMetalnessTex).Sample(g_globalSampler, uv).rgb;
	const RF32 roughness = comp.g * localConstants.m_roughnessScale;
	const RF32 metallic = comp.b * localConstants.m_metalnessScale;
#		else
	const RF32 roughness = localConstants.m_roughnessScale;
	const RF32 metallic = localConstants.m_metalnessScale;
#		endif

#		if NORMAL_TEX
	const RVec3 nAtTangentspace = normalize((BINDLESS(localConstants.m_normalTex).Sample(g_globalSampler, uv).rgb - 0.5) * 2.0);
	const Vec3 viewDir = normalize(g_globalConstants.m_cameraTransform.getTranslationPart() - vertInput.m_worldPos);
	const RVec3 normal = perturbNormal(nAtTangentspace, viewDir, uv, normalize(vertInput.m_normal));
#		else
	const RVec3 normal = normalize(vertInput.m_normal);
#		endif

#		if EMISSIVE_TEX
	const RVec3 emission = BINDLESS(localConstants.m_emissiveTex).Sample(g_globalSampler, uv).rgb * localConstants.m_emissionScale;
#		else
	const RVec3 emission = localConstants.m_emissionScale;
#		endif

#		if ANKI_VELOCITY || ANKI_BONES
	const Vec2 prevNdc = vertInput.m_prevClipXyw.xy / vertInput.m_prevClipXyw.z;
	const Vec2 crntNdc = vertInput.m_crntClipXyw.xy / vertInput.m_crntClipXyw.z;

	// It's ndcToUv(prevNdc) - ndcToUv(crntNdc) or:
	const Vec2 velocity = (prevNdc - crntNdc) * 0.5;
#		else
	const Vec2 velocity = Vec2(1.0, 1.0);
#		endif

	GbufferInfo g;
	g.m_diffuse = diffColor;
	g.m_normal = normal;
	g.m_f0 = specColor;
	g.m_roughness = roughness;
	g.m_subsurface = localConstants.m_subsurface;
	g.m_emission = emission;
	g.m_metallic = metallic;
	g.m_velocity = velocity;

#		if VISUALIZE_MESHLETS && (ANKI_TECHNIQUE_GBufferMeshShaders || ANKI_TECHNIQUE_GBufferSwMeshletRendering)
#			if ANKI_TECHNIQUE_GBufferMeshShaders
	const U32 meshletIdx = primInput.m_meshletIndex % 6u;
#			else
	const U32 meshletIdx = vertInput.m_meshletIndex % 6u;
#			endif
	switch(meshletIdx)
	{
	case 0:
		g.m_diffuse = Vec3(1.0f, 0.0f, 0.0f);
		break;
	case 1:
		g.m_diffuse = Vec3(0.0f, 1.0f, 0.0f);
		break;
	case 2:
		g.m_diffuse = Vec3(0.0f, 0.0f, 1.0f);
		break;
	case 3:
		g.m_diffuse = Vec3(1.0f, 1.0f, 0.0f);
		break;
	case 4:
		g.m_diffuse = Vec3(1.0f, 0.0f, 1.0f);
		break;
	case 5:
		g.m_diffuse = Vec3(0.0f, 1.0f, 1.0f);
		break;
	}
#		endif

	FragOut output;
	packGBuffer(g, output.m_color0, output.m_color1, output.m_color2, output.m_color3);
	return output;
}
#	endif
#endif // ANKI_FRAGMENT_SHADER

// ===========================================================================
// RT Shadows                                                                =
// ===========================================================================
#if ANKI_ANY_HIT_SHADER

#	if REALLY_ALPHA_TEST
[[vk::shader_record_ext]] ConstantBuffer<GpuSceneRenderableInstance> g_gpuSceneRenderable : register(b0); // TODO that won't work on D3D
#	endif

[shader("anyhit")] void main(inout RayPayload payload, in Barycentrics barycentrics)
{
	ANKI_MAYBE_UNUSED(payload);
	ANKI_MAYBE_UNUSED(barycentrics);

#	if REALLY_ALPHA_TEST
	payload.m_shadowFactor = 1.0;

	const Vec3 bary = Vec3(1.0f - barycentrics.m_value.x - barycentrics.m_value.y, barycentrics.m_value.x, barycentrics.m_value.y);

	const GpuSceneMeshLod mesh = g_meshLods[g_gpuSceneRenderable.m_meshLodIndex];

	const U32 idx0 = g_unifiedGeom_R16_Uint[mesh.m_firstIndex + PrimitiveIndex() * 3 + 0];
	const U32 idx1 = g_unifiedGeom_R16_Uint[mesh.m_firstIndex + PrimitiveIndex() * 3 + 1];
	const U32 idx2 = g_unifiedGeom_R16_Uint[mesh.m_firstIndex + PrimitiveIndex() * 3 + 2];

	const UnpackedMeshVertex vert0 = loadVertex(mesh, idx0, false);
	const UnpackedMeshVertex vert1 = loadVertex(mesh, idx1, false);
	const UnpackedMeshVertex vert2 = loadVertex(mesh, idx2, false);

	const Vec2 uv = vert0.m_uv * bary.x + vert1.m_uv * bary.y + vert2.m_uv * bary.z;

	const AnKiLocalConstants localConstants = loadAnKiLocalConstants(g_gpuScene, g_gpuSceneRenderable.m_constantsOffset);
	const RVec4 diffColorA =
		getBindlessTexture2DRVec4(localConstants.m_diffuseTex).SampleLevel(g_globalSampler, uv, 0.0) * localConstants.m_diffuseScale;

	if(diffColorA.a < 1.0)
	{
		payload.m_shadowFactor = 0.0;
		AcceptHitAndEndSearch();
	}
	else
	{
		IgnoreHit();
	}
#	else
	payload.m_shadowFactor = 0.0;
	AcceptHitAndEndSearch();
#	endif
}
#endif // ANKI_ANY_HIT_SHADER

#if ANKI_CLOSEST_HIT_SHADER
[shader("closesthit")] void main(inout RayPayload payload, in Barycentrics barycentrics)
{
	ANKI_MAYBE_UNUSED(payload);
	ANKI_MAYBE_UNUSED(barycentrics);
}
#endif // ANKI_CLOSEST_HIT_SHADER

// ===========================================================================
// Define the techniques                                                     =
// ===========================================================================
#pragma anki technique_start vert GBufferLegacy uses_mutators ANKI_VELOCITY ANKI_BONES DIFFUSE_TEX NORMAL_TEX PARALLAX ALPHA_TEST
#pragma anki technique_end vert GBufferLegacy

#pragma anki technique_start vert ShadowsLegacy uses_mutators ANKI_VELOCITY ANKI_BONES DIFFUSE_TEX PARALLAX ALPHA_TEST
#pragma anki technique_end vert ShadowsLegacy

#pragma anki technique_start vert GBufferSwMeshletRendering uses_mutators ANKI_VELOCITY ANKI_BONES DIFFUSE_TEX NORMAL_TEX PARALLAX ALPHA_TEST
#pragma anki technique_end vert GBufferSwMeshletRendering

#pragma anki technique_start vert ShadowsSwMeshletRendering uses_mutators ANKI_VELOCITY ANKI_BONES DIFFUSE_TEX PARALLAX ALPHA_TEST
#pragma anki technique_end vert ShadowsSwMeshletRendering

#pragma anki technique_start mesh GBufferMeshShaders uses_mutators ANKI_VELOCITY ANKI_BONES DIFFUSE_TEX NORMAL_TEX PARALLAX ALPHA_TEST
#pragma anki technique_end mesh GBufferMeshShaders

#pragma anki technique_start mesh ShadowsMeshShaders uses_mutators ANKI_VELOCITY ANKI_BONES DIFFUSE_TEX PARALLAX ALPHA_TEST
#pragma anki technique_end mesh ShadowsMeshShaders

#pragma anki technique_start frag GBufferLegacy
#pragma anki technique_end frag GBufferLegacy

#pragma anki technique_start frag ShadowsLegacy
#pragma anki technique_end frag ShadowsLegacy

#pragma anki technique_start frag GBufferMeshShaders
#pragma anki technique_end frag GBufferMeshShaders

#pragma anki technique_start frag ShadowsMeshShaders
#pragma anki technique_end frag ShadowsMeshShaders

#pragma anki technique_start frag GBufferSwMeshletRendering
#pragma anki technique_end frag GBufferSwMeshletRendering

#pragma anki technique_start frag ShadowsSwMeshletRendering
#pragma anki technique_end frag ShadowsSwMeshletRendering

#pragma anki technique_start ahit RtShadows uses_mutators ALPHA_TEST DIFFUSE_TEX
#pragma anki technique_end ahit RtShadows

#pragma anki technique_start chit RtShadows uses_mutators
#pragma anki technique_end chit RtShadows
