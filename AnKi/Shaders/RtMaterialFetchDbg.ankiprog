// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki 16bit

#pragma anki technique RtMaterialFetch rgen

#include <AnKi/Shaders/RtMaterialFetch.hlsl>
#include <AnKi/Shaders/Include/GpuSceneTypes.h>

[shader("raygeneration")] void main()
{
	Vec2 outSize;
	g_colorAndPdfTex.GetDimensions(outSize.x, outSize.y);
	const Vec2 uv = Vec2(DispatchRaysIndex().xy) / outSize;

	const Vec4 v4 = mul(g_globalRendererConstants.m_matrices.m_invertedViewProjectionJitter, Vec4(uvToNdc(uv), 1.0, 1.0));
	const Vec3 worldPos = v4.xyz / v4.w;

	const Vec3 rayOrigin = g_globalRendererConstants.m_matrices.m_cameraTransform.getTranslationPart().xyz;
	const Vec3 rayDir = normalize(worldPos - rayOrigin);

	// Trace
	RtMaterialFetchRayPayload payload;
	payload = (RtMaterialFetchRayPayload)0;
	payload.m_textureLod = 0.0;
	const U32 flags = RAY_FLAG_FORCE_OPAQUE;
	const U32 sbtRecordOffset = 0u;
	const U32 sbtRecordStride = 0u;
	const U32 missIndex = 0u;
	const U32 cullMask = 0xFFu;
	RayDesc ray;
	ray.Origin = rayOrigin;
	ray.TMin = 0.1;
	ray.Direction = rayDir;
	ray.TMax = 100.0; // TODO
	TraceRay(g_tlas, flags, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, ray, payload);

	Vec3 col;
	if(payload.m_rayT < 0.0)
	{
		col = Vec3(1.0, 0.0, 1.0);
	}
	else if(payload.m_rayT == kMaxF32)
	{
		col = Vec3(0.0, 0.0, 1.0);
	}
	else
	{
		col = payload.m_diffuseColor * 1.0 + (payload.m_worldNormal.xyz / 2.0 + 0.5) * 0.0 + payload.m_rayT * 0.0 + payload.m_emission * 0.0;
	}

	g_colorAndPdfTex[DispatchRaysIndex().xy] = Vec4(col, 0.0);
}
