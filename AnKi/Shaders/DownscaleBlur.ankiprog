// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#include <AnKi/Shaders/QuadVert.hlsl>
#if ANKI_COMPUTE_SHADER || ANKI_FRAGMENT_SHADER
#	include <AnKi/Shaders/TonemappingFunctions.hlsl>
#	include <AnKi/Shaders/Functions.hlsl>

SamplerState g_linearAnyClampSampler : register(s0);
Texture2D<RVec3> g_tex : register(t0);

#	define TONEMAPPING_REGISTER u0
#	include <AnKi/Shaders/TonemappingResources.hlsl>

struct Constants
{
	Vec2 m_fbSize;
	UVec2 m_padding;
};
ANKI_FAST_CONSTANTS(Constants, g_consts)

#	if ANKI_COMPUTE_SHADER
RWTexture2D<RVec4> g_storageTex : register(u1);
#	endif

#	if ANKI_COMPUTE_SHADER
[numthreads(8, 8, 1)] void main(UVec2 svDispatchThreadId : SV_DISPATCHTHREADID)
#	else
RVec3 main(VertOut input) : SV_TARGET0
#	endif
{
#	if ANKI_COMPUTE_SHADER
	const Vec2 uv = (Vec2(svDispatchThreadId) + 0.5) / g_consts.m_fbSize;
#	else
	const Vec2 uv = input.m_uv;
#	endif

	RVec3 output;
	const RF32 weight = 1.0 / 5.0;
	output = g_tex.SampleLevel(g_linearAnyClampSampler, uv, 0.0) * weight;
	output += g_tex.SampleLevel(g_linearAnyClampSampler, uv, 0.0, IVec2(+1, +1)) * weight;
	output += g_tex.SampleLevel(g_linearAnyClampSampler, uv, 0.0, IVec2(-1, -1)) * weight;
	output += g_tex.SampleLevel(g_linearAnyClampSampler, uv, 0.0, IVec2(+1, -1)) * weight;
	output += g_tex.SampleLevel(g_linearAnyClampSampler, uv, 0.0, IVec2(-1, +1)) * weight;

#	if ANKI_COMPUTE_SHADER
	g_storageTex[svDispatchThreadId] = RVec4(output, 1.0);
#	else
	return output;
#	endif
}
#endif // ANKI_COMPUTE_SHADER || ANKI_FRAGMENT_SHADER

#pragma anki technique_start vert
#pragma anki technique_end vert

#pragma anki technique_start frag
#pragma anki technique_end frag

#pragma anki technique_start comp
#pragma anki technique_end comp
