// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator LAST_PASS 0 1

#pragma anki technique comp

#include <AnKi/Shaders/RtShadows.hlsl>
#include <AnKi/Shaders/BilateralFilter.hlsl>
#include <AnKi/Shaders/Functions.hlsl>

SamplerState g_linearAnyClampSampler : register(s0);
Texture2D<Vec4> g_depthTex : register(t0);
Texture2D<Vec4> g_shadowsTex : register(t1);
Texture2D<Vec4> g_varianceTex : register(t2);

RWTexture2D<UVec4> g_shadowStorageTex : register(u0);
#if !LAST_PASS
RWTexture2D<Vec4> g_varianceStorageTex : register(u1);
#endif

ANKI_FAST_CONSTANTS(Mat4, g_invProjMat)

constexpr I32 kConvolutionRadius = 2;
constexpr F32 kKernelWeights[kConvolutionRadius + 1] = {1.0, 2.0 / 3.0, 1.0 / 6.0};

Vec3 toViewspace(Vec2 uv, F32 depth)
{
	const Vec4 pos4 = mul(g_invProjMat, Vec4(uvToNdc(uv), depth, 1.0));
	const Vec3 pos = pos4.xyz / pos4.w;
	return pos;
}

F32 computeShadowsLuma(F32 shadowFactor)
{
	return shadowFactor;
}

F32 computeVarianceCenter(Vec2 uv)
{
	const F32 kernel[2][2] = {{1.0 / 4.0, 1.0 / 8.0}, {1.0 / 8.0, 1.0 / 16.0}};
	const I32 radius = 1;
	Vec2 texSize;
	F32 mipCount;
	g_varianceTex.GetDimensions(0, texSize.x, texSize.y, mipCount);
	const Vec2 texelSize = 1.0 / texSize;
	F32 sum = 0.0;

	for(I32 yy = -radius; yy <= radius; yy++)
	{
		for(I32 xx = -radius; xx <= radius; xx++)
		{
			const Vec2 newUv = uv + Vec2(xx, yy) * texelSize;
			const F32 k = kernel[abs(xx)][abs(yy)];
			sum += g_varianceTex.SampleLevel(g_linearAnyClampSampler, newUv, 0.0).r * k;
		}
	}

	return sum;
}

[numthreads(8, 8, 1)] void main(UVec3 svDispatchThreadId : SV_DISPATCHTHREADID)
{
	Vec2 outUavSize;
	g_shadowStorageTex.GetDimensions(outUavSize.x, outUavSize.y);

	if(any(Vec2(svDispatchThreadId.xy) >= outUavSize))
	{
		return;
	}

	const Vec2 uv = (Vec2(svDispatchThreadId.xy) + 0.5) / outUavSize;

	const F32 depth = g_depthTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).r;
	if(depth == 1.0)
	{
		// Sky
		g_shadowStorageTex[svDispatchThreadId.xy] = 0.0f;
#if !LAST_PASS
		g_varianceStorageTex[svDispatchThreadId.xy] = 0.0f;
#endif
		return;
	}

	// Set the reference sample
	const F32 depthCenter = depth;
	const Vec3 positionCenter = toViewspace(uv, depthCenter);

	// Read center luma
	const F32 refLuma = computeShadowsLuma(g_shadowsTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).x);

	// Center variance
	const F32 varianceCenter = computeVarianceCenter(uv);

	// Init the sums
	F32 sumShadowFactor = 0.0;
	F32 sumVariance = 0.0;
	F32 sumWeight = kEpsilonF32;

	// Convolve
	Vec2 texSize;
	F32 mipCount;
	g_shadowsTex.GetDimensions(0u, texSize.x, texSize.y, mipCount);
	const Vec2 texelSize = 1.0 / texSize;
	for(I32 offsetx = -kConvolutionRadius; offsetx <= kConvolutionRadius; offsetx++)
	{
		for(I32 offsety = -kConvolutionRadius; offsety <= kConvolutionRadius; offsety++)
		{
			const Vec2 sampleUv = uv + Vec2(offsetx, offsety) * texelSize;

			// Read shadows
			const F32 localShadowFactor = g_shadowsTex.SampleLevel(g_linearAnyClampSampler, sampleUv, 0.0).r;

			// Compute luma weight
			const F32 luma = computeShadowsLuma(localShadowFactor);
			const F32 variance = g_varianceTex.SampleLevel(g_linearAnyClampSampler, sampleUv, 0.0).x;
			const F32 sigmaL = 4.0;
			const F32 lumaDiff = abs(luma - refLuma);
			const F32 wl = min(1.0, exp(-lumaDiff / (sigmaL * sqrt(varianceCenter + 0.001) + kEpsilonF32)));

			// Set the current sample
			const F32 depthTap = g_depthTex.SampleLevel(g_linearAnyClampSampler, sampleUv, 0.0).r;
			const Vec3 positionTap = toViewspace(sampleUv, depthTap);

			// Do bilateral
			F32 w = calculateBilateralWeightViewspacePosition(positionCenter, positionTap, 0.5);

			// Include more weights
			w *= wl;
			// w *= kKernelWeights[abs(offsetx)] * kKernelWeights[abs(offsety)];

			// Sum
			sumShadowFactor += localShadowFactor * w;
			sumVariance += w * w * variance;
			sumWeight += w;
		}
	}

	// Normalize
	sumShadowFactor /= sumWeight;
	sumVariance /= (sumWeight * sumWeight);

	// Store
	g_shadowStorageTex[svDispatchThreadId.xy] = sumShadowFactor;
#if !LAST_PASS
	g_varianceStorageTex[svDispatchThreadId.xy] = Vec4(sumVariance, 0.0, 0.0, 0.0);
#endif
}
