// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator FILM_GRAIN 0 1
#pragma anki mutator BLOOM_ENABLED 0 1
#pragma anki mutator DBG_ENABLED 0 1

#pragma anki technique vert pixel

#include <AnKi/Shaders/QuadVert.hlsl>

#if ANKI_PIXEL_SHADER
#	include <AnKi/Shaders/Functions.hlsl>

SamplerState g_linearAnyClampSampler : register(s0);
SamplerState g_trilinearRepeatSampler : register(s1);
Texture2D<RVec4> g_lightShadingRt : register(t0);
Texture2D<RVec4> g_ppsBloomLfRt : register(t1);
Texture3D<RVec4> g_lut : register(t2);
#	if DBG_ENABLED
Texture2D<RVec4> g_dbgOutlineRt : register(t3);
#	endif

struct Constants
{
	F32 m_filmGrainStrength;
	U32 m_frameCount;
	U32 m_padding1;
	U32 m_padding2;
};
ANKI_FAST_CONSTANTS(Constants, g_consts)

RVec3 colorGrading(RVec3 color)
{
	Vec3 lutSize;
	g_lut.GetDimensions(lutSize.x, lutSize.y, lutSize.y);

	const RVec3 lutScale = ((lutSize.x - 1.0) / lutSize.x).xxx;
	const RVec3 lutOffset = (1.0 / (2.0 * lutSize.x)).xxx;

	color = min(color, RVec3(1.0, 1.0, 1.0));
	const RVec3 lutCoords = color * lutScale + lutOffset;
	return g_lut.SampleLevel(g_trilinearRepeatSampler, lutCoords, 0.0).rgb;
}

RVec4 main(VertOut input) : SV_TARGET0
{
	const Vec2 uv = input.m_uv;
	ANKI_MAYBE_UNUSED(uv);
	RVec3 outColor = outColor = g_lightShadingRt.SampleLevel(g_linearAnyClampSampler, uv, 0.0).rgb;

#	if BLOOM_ENABLED
	const RVec3 bloom = g_ppsBloomLfRt.SampleLevel(g_linearAnyClampSampler, uv, 0.0).rgb;
	outColor += bloom;
#	endif

	outColor = colorGrading(outColor);

#	if FILM_GRAIN
	const F32 dt = 1.0;
	outColor = filmGrain<F32>(outColor, uv, g_consts.m_filmGrainStrength, F32(g_consts.m_frameCount % 0xFFFFu) * dt);
#	endif

#	if DBG_ENABLED
	const RVec4 dbg = g_dbgOutlineRt.SampleLevel(g_linearAnyClampSampler, uv, 0.0);
	outColor = lerp(outColor, dbg.rgb, dbg.a);
#	endif

	return RVec4(outColor, 0.0);
}
#endif // ANKI_PIXEL_SHADER
