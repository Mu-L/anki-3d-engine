// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// This shader does a particle simulation

#pragma anki technique comp

#include <AnKi/Shaders/Include/ParticleTypes.h>
#include <AnKi/Shaders/Common.hlsl>

Texture2D g_depthTex : register(t0);
RWStructuredBuffer<GpuParticle> g_particles : register(u0);
ConstantBuffer<GpuParticleEmitterProperties> g_props : register(b0);
StructuredBuffer<F32> g_randomFactors : register(t1); // The 1st element is a uint with the count of the numbers
SamplerState g_nearestAnyClampSampler : register(s0);
ConstantBuffer<GpuParticleSimulationState> g_state : register(b1);

F32 smallerDelta(F32 left, F32 mid, F32 right)
{
	const F32 a = mid - left;
	const F32 b = right - mid;

	return (abs(a) < abs(b)) ? a : b;
}

Vec3 unproject(Vec2 ndc, F32 depth)
{
	const F32 z = g_state.m_unprojectionParams.z / (g_state.m_unprojectionParams.w + depth);
	const Vec2 xy = ndc * g_state.m_unprojectionParams.xy * z;
	return Vec3(xy, z);
}

// Compute the normal using the depth buffer
Vec3 computeNormal(const Vec2 uv, const F32 depth)
{
	const F32 depthLeft = g_depthTex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0, IVec2(-2, 0)).r;
	const F32 depthRight = g_depthTex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0, IVec2(2, 0)).r;
	const F32 depthTop = g_depthTex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0, IVec2(0, 2)).r;
	const F32 depthBottom = g_depthTex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0, IVec2(0, -2)).r;

	const F32 ddx = smallerDelta(depthLeft, depth, depthRight);
	const F32 ddy = smallerDelta(depthBottom, depth, depthTop);

	const Vec2 ndc = uvToNdc(uv);
	Vec3 textureSize;
	g_depthTex.GetDimensions(0, textureSize.x, textureSize.y, textureSize.z);
	const Vec2 texelSize = 1.0 / textureSize.xy;
	const Vec2 ndcTexelSize = 2.0 * texelSize;
	const Vec3 right = unproject(ndc + Vec2(ndcTexelSize.x, 0.0), depth + ddx);
	const Vec3 top = unproject(ndc + Vec2(0.0, ndcTexelSize.y), depth + ddy);

	const Vec3 origin = unproject(ndc, depth);
	Vec3 normalVSpace = cross(origin - top, right - origin);
	normalVSpace = normalize(normalVSpace);

	return mul(g_state.m_invViewRotation, Vec4(normalVSpace, 0.0));
}

void initParticle(UVec3 svDispatchThreadId, out GpuParticle p)
{
	const U32 randomFactorCount = asuint(g_randomFactors[0]);
	const F32 randFactor = g_randomFactors[((svDispatchThreadId.x + g_state.m_randomIndex) % randomFactorCount) + 1];

	p.m_newWorldPosition = lerp(g_props.m_minStartingPosition, g_props.m_maxStartingPosition, randFactor) + g_state.m_emitterPosition;
	p.m_oldWorldPosition = p.m_newWorldPosition;

	p.m_mass = lerp(g_props.m_minMass, g_props.m_maxMass, randFactor);
	p.m_startingLife = lerp(g_props.m_minLife, g_props.m_maxLife, randFactor);
	p.m_life = p.m_startingLife;
	p.m_acceleration = lerp(g_props.m_minGravity, g_props.m_maxGravity, randFactor);

	// Calculate the initial velocity
	const Vec3 initialForce = mul(g_state.m_emitterRotation, Vec4(lerp(g_props.m_minForce, g_props.m_maxForce, randFactor), 0.0));
	const Vec3 totalForce = (p.m_acceleration * p.m_mass) + initialForce;
	const Vec3 acceleration = totalForce / p.m_mass;
	p.m_velocity = acceleration * g_state.m_dt;
}

[numthreads(64, 1, 1)] void main(UVec3 svDispatchThreadId : SV_DISPATCHTHREADID)
{
	const U32 particleIdx = svDispatchThreadId.x;
	if(particleIdx >= g_props.m_particleCount)
	{
		return;
	}

	GpuParticle particle = g_particles[particleIdx];
	const F32 dt = g_state.m_dt;

	// Check if it's dead
	if(particle.m_life - dt <= 0.0)
	{
		// Dead, revive
		initParticle(svDispatchThreadId, particle);
	}
	else
	{
		// Simulate

		particle.m_life -= dt;

		const Vec3 xp = particle.m_oldWorldPosition;
		const Vec3 xc = particle.m_acceleration * (dt * dt) + g_particles[particleIdx].m_velocity * dt + xp;

		// Project the point
		const Vec4 proj4 = mul(g_state.m_viewProjMat, Vec4(xc, 1.0));
		const Vec3 proj3 = proj4.xyz / proj4.w;
		if(all(proj3.xy >= Vec2(-1.0, -1.0)) && all(proj3.xy <= Vec2(1.0, 1.0)))
		{
			// It's visible, test against the depth buffer

			const F32 refDepth = g_depthTex.SampleLevel(g_nearestAnyClampSampler, ndcToUv(proj3.xy), 0.0).r;
			const F32 testDepth = proj3.z;

			if(testDepth >= refDepth)
			{
				// Collides, change its direction
				const Vec3 normal = computeNormal(ndcToUv(proj3.xy), refDepth);
				particle.m_velocity = reflect(particle.m_velocity, normal);

				particle.m_oldWorldPosition = particle.m_newWorldPosition;
			}
			else
			{
				particle.m_oldWorldPosition = particle.m_newWorldPosition;
				particle.m_newWorldPosition = xc;
			}
		}
		else
		{
			particle.m_oldWorldPosition = particle.m_newWorldPosition;
			particle.m_newWorldPosition = xc;
		}
	}

	// Write back the particle
	g_particles[particleIdx] = particle;
}
