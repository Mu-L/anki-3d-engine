// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator DEPTH_FAIL_VISUALIZATION 0 1

#pragma anki technique vert pixel

#include <AnKi/Shaders/Common.hlsl>
#include <AnKi/Shaders/Include/GpuSceneTypes.h>

struct Constants
{
	Vec4 m_color;
	Mat4 m_viewProjMat;
};

ANKI_FAST_CONSTANTS(Constants, g_consts)

StructuredBuffer<GpuSceneRenderableBoundingVolume> g_renderableBoundingVolumes : register(t1);
StructuredBuffer<U32> g_visibleRenderableBoundingVolumeIndices : register(t2);

struct VertOut
{
	Vec4 m_svPosition : SV_POSITION;
};

struct VertIn
{
	Vec3 m_position : POSITION;
	U32 m_svInstanceId : SV_INSTANCEID;
};

#if ANKI_VERTEX_SHADER
VertOut main(VertIn input)
{
	VertOut output;

	const U32 bvolumeCount = g_visibleRenderableBoundingVolumeIndices[0];

	if(input.m_svInstanceId < bvolumeCount)
	{
		const GpuSceneRenderableBoundingVolume bvol = g_renderableBoundingVolumes[g_visibleRenderableBoundingVolumeIndices[input.m_svInstanceId + 1]];
		const Vec3 boxCenter = (bvol.m_aabbMin + bvol.m_aabbMax) * 0.5f;
		Vec3 localPos = input.m_position * (bvol.m_aabbMax - boxCenter) + boxCenter;
		output.m_svPosition = mul(g_consts.m_viewProjMat, Vec4(localPos, 1.0));
	}
	else
	{
		// Skip this instance by making the vertex degenerate
		output.m_svPosition = 0.0f;
	}

	return output;
}
#endif // ANKI_VERTEX_SHADER

#if ANKI_PIXEL_SHADER
#	include <AnKi/Shaders/ImportanceSampling.hlsl>

// NOTE: Don't eliminate the binding because it confuses the descriptor set creation
#	if DEPTH_FAIL_VISUALIZATION == 1
SamplerState g_nearestAnyClampSampler : register(s0);
Texture2D g_depthRt : register(t0);
#	endif

Vec4 main(VertOut input) : SV_TARGET0
{
	ANKI_MAYBE_UNUSED(input);

	// Check if we should skip the frag
#	if DEPTH_FAIL_VISUALIZATION == 1
	Vec2 texSize;
	g_depthRt.GetDimensions(texSize.x, texSize.y);
	const Vec2 uv = input.m_svPosition.xy / texSize;
	const F32 depthRef = g_depthRt.SampleLevel(g_nearestAnyClampSampler, uv, 0.0).r;
	const Bool depthTestFailed = input.m_svPosition.z >= depthRef;
	if(depthTestFailed)
	{
		return g_consts.m_color * 0.5;
	}
#	endif

	// Write the color
	return g_consts.m_color;
}
#endif // ANKI_PIXEL_SHADER
