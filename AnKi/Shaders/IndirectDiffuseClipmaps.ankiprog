// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki 16bit

#pragma anki mutator GPU_WAVE_SIZE 16 32 64
#pragma anki mutator RADIANCE_OCTAHEDRON_MAP_SIZE 8 10 12 14
#pragma anki mutator IRRADIANCE_OCTAHEDRON_MAP_SIZE 4 5 6

#pragma anki technique RtMaterialFetch rgen mutators
#pragma anki technique PopulateCaches comp mutators RADIANCE_OCTAHEDRON_MAP_SIZE
#pragma anki technique ComputeIrradiance comp mutators GPU_WAVE_SIZE RADIANCE_OCTAHEDRON_MAP_SIZE IRRADIANCE_OCTAHEDRON_MAP_SIZE
#pragma anki technique Test comp mutators
#pragma anki technique VisualizeProbes vert pixel mutators

// #define ANKI_ASSERTIONS_ENABLED 1

#include <AnKi/Shaders/Include/GpuSceneTypes.h>
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/Include/MiscRendererTypes.h>
#include <AnKi/Shaders/ImportanceSampling.hlsl>
#include <AnKi/Shaders/PackFunctions.hlsl>
#include <AnKi/Shaders/FastMathFunctions.hlsl>

#define CLIPMAP_VOLUME 1
#include <AnKi/Shaders/RtMaterialFetch.hlsl>

F32 computeClipmapFade(Clipmap clipmap, Vec3 cameraPos, Vec3 lookDir, Vec3 worldPos)
{
	const Vec3 offset = normalize(lookDir) * kIndirectDiffuseClipmapForwardBias * (clipmap.m_index + 1);
	const Vec3 biasedCameraPos = cameraPos + offset;

	const Vec3 probeSize = clipmap.m_size / clipmap.m_probeCounts;
	const Vec3 halfSize = clipmap.m_size * 0.5;
	const Vec3 aabbMin = biasedCameraPos - halfSize + probeSize;
	const Vec3 aabbMax = biasedCameraPos + halfSize - probeSize;

	const Vec3 distances = select(worldPos > cameraPos, aabbMax - cameraPos, cameraPos - aabbMin);

	Vec3 a = abs(worldPos - cameraPos) / distances;
	a = min(1.0, a);
	a = pow(a, 32.0);
	a = 1.0 - a;

	F32 fade = a.x * a.y * a.z;

	return fade;
}

Bool insideClipmap(Clipmap clipmap, Vec3 worldPos)
{
	return (all(worldPos < clipmap.m_aabbMin + clipmap.m_size) && all(worldPos > clipmap.m_aabbMin));
}

U16 findClipmapOnPosition(Clipmap clipmaps[kIndirectDiffuseClipmapCount], Vec3 cameraPos, Vec3 lookDir, Vec3 worldPos, F32 randFactor)
{
	for(U32 i = 0; i < kIndirectDiffuseClipmapCount; ++i)
	{
		const F32 fade = computeClipmapFade(clipmaps[i], cameraPos, lookDir, worldPos);
		if(fade > randFactor)
		{
			return i;
		}
	}

	return kIndirectDiffuseClipmapCount;
}

U16 findClipmapOnPositionCheap(Clipmap clipmaps[kIndirectDiffuseClipmapCount], Vec3 worldPos)
{
	for(U32 i = 0; i < kIndirectDiffuseClipmapCount; ++i)
	{
		if(insideClipmap(clipmaps[i], worldPos))
		{
			return i;
		}
	}

	return kIndirectDiffuseClipmapCount;
}

Vec2 generateRandomUv(U32 sampleIdx, U32 sampleCount, U32 frame)
{
	const UVec3 r = rand3DPCG16(UVec3(frame % 8u, frame % 4u, frame % 16u));
	return hammersleyRandom16(sampleIdx, sampleCount, r);
}

HVec3 generateRandomPointInSphere(U32 sampleIdx, U32 sampleCount, U32 frame)
{
	return octahedronDecode(generateRandomUv(sampleIdx, sampleCount, frame));
}

/// Find out the clipmap for a given sample point and sample the probes in the volumes.
Vec3 sampleClipmapIrradianceCommon(Vec3 samplePoint, Vec3 normal, Vec3 cameraPos, Vec3 lookDir, Clipmap clipmaps[kIndirectDiffuseClipmapCount],
								   Texture3D<Vec4> volumes[kIndirectDiffuseClipmapCount],
								   Texture3D<Vec4> distanceMomentsVolumes[kIndirectDiffuseClipmapCount],
								   Texture3D<Vec4> probeValidityVolumes[kIndirectDiffuseClipmapCount], SamplerState linearAnyRepeatSampler,
								   F32 slowVersionRandFactor, Bool fastVersion)
{
#if 1
	const U16 clipmapIdx = (fastVersion) ? findClipmapOnPositionCheap(clipmaps, samplePoint)
										 : findClipmapOnPosition(clipmaps, cameraPos, lookDir, samplePoint, slowVersionRandFactor);
#else
	U16 clipmapIdx = 0;
	if(!insideClipmap(clipmaps[clipmapIdx], samplePoint))
	{
		clipmapIdx = 10;
	}
#endif

#if 0
	if(clipmapIdx == 0)
	{
		return = Vec3(1, 0, 0);
	}
	else if(clipmapIdx == 1)
	{
		return = Vec3(0, 1, 0);
	}
	else if(clipmapIdx == 2)
	{
		return Vec3(0, 0, 1);
	}
	else
	{
		return = Vec3(1, 0, 1);
	}
#endif

	if(clipmapIdx >= kIndirectDiffuseClipmapCount)
	{
		return 0.0;
	}

	const Clipmap clipmap = clipmaps[clipmapIdx];
	const Vec3 probeSize = clipmap.m_size / clipmap.m_probeCounts;
	const Vec3 fakeVolumeSize = clipmap.m_probeCounts; // Volume size without the octahedron

	const Vec3 biasedWorldPos = samplePoint + normal * min3(probeSize) * 0.1;

	F32 octahedronSize = 0.0;
	Vec3 realVolumeSize;
	{
		volumes[0].GetDimensions(realVolumeSize.x, realVolumeSize.y, realVolumeSize.z);

		octahedronSize = realVolumeSize.x / clipmap.m_probeCounts.x;
		octahedronSize -= 2.0; // The border
	};
	const F32 distMomentsOctSize = octahedronSize;
	const Vec3 distMomentsRealVolumeSize = realVolumeSize;

	const Vec3 samplePointUvw = frac(biasedWorldPos / clipmap.m_size);
	const Vec3 icoord = floor(samplePointUvw * fakeVolumeSize - 0.5);
	const Vec3 fcoord = frac(samplePointUvw * fakeVolumeSize - 0.5);

	const Vec3 firstProbePosition = floor((biasedWorldPos - probeSize / 2.0) / probeSize) * probeSize + probeSize / 2.0;

	F32 weightSum = 0.0;
	Vec3 value = 0.0;
	for(U32 i = 0u; i < 8u; ++i)
	{
		const Vec3 xyz = Vec3(UVec3(i, i >> 1u, i >> 2u) & 1u);
		Vec3 coords = icoord + xyz;

		// Repeat
		coords = select(coords >= 0.0, coords, fakeVolumeSize + coords);
		coords = select(coords < fakeVolumeSize, coords, coords - fakeVolumeSize);

		if(!fastVersion)
		{
			const Bool valid = probeValidityVolumes[NonUniformResourceIndex(clipmapIdx)][coords.xzy].x > 0.8;
			if(!valid)
			{
				continue;
			}
		}

		// Reject probes outside the current clipmap. The accurate version doesn't need that because it fades between clipmaps.
		const Vec3 probePosition = firstProbePosition + xyz * probeSize;
		if(fastVersion)
		{
			if(!insideClipmap(clipmap, probePosition))
			{
				continue;
			}
		}

		// Filtering weight
		const Vec3 w3 = select(xyz == 0.0, 1.0 - fcoord, fcoord);
		F32 w = w3.x * w3.y * w3.z;

		// Normal weight
		const Vec3 dir = normalize(probePosition - samplePoint);
		const F32 wNormal = (dot(dir, normal) + 1.0) * 0.5;
		w *= (wNormal * wNormal) + 0.2;

		// Chebyshev occlusion
		if(!fastVersion)
		{
			Vec3 uvw = coords.xzy;
			uvw.xy *= distMomentsOctSize + 2.0;
			uvw.xy += 1.0;
			uvw.xy += octahedronEncode(normalize(biasedWorldPos - probePosition)) * distMomentsOctSize;
			uvw.z += 0.5;
			uvw /= distMomentsRealVolumeSize;
			const Vec2 distMoments = distanceMomentsVolumes[NonUniformResourceIndex(clipmapIdx)].SampleLevel(linearAnyRepeatSampler, uvw, 0.0);

			const F32 variance = abs(distMoments.x * distMoments.x - distMoments.y);

			const F32 posToProbeDist = length(biasedWorldPos - probePosition);
			F32 chebyshevWeight = 1.0;
			if(posToProbeDist > distMoments.x) // occluded
			{
				// v must be greater than 0, which is guaranteed by the if condition above.
				const F32 v = posToProbeDist - distMoments.x;
				chebyshevWeight = variance / (variance + (v * v));

				// Increase the contrast in the weight
				chebyshevWeight = max((chebyshevWeight * chebyshevWeight * chebyshevWeight), 0.05);
			}

			w *= chebyshevWeight;
		}

		// Compute the actual coords
		Vec3 uvw = coords.xzy;
		uvw.xy *= octahedronSize + 2.0;
		uvw.xy += 1.0;
		uvw.xy += octahedronEncode(normal) * octahedronSize;
		uvw.z += 0.5;
		uvw /= realVolumeSize;

		const Vec3 ir = volumes[NonUniformResourceIndex(clipmapIdx)].SampleLevel(linearAnyRepeatSampler, uvw, 0.0);
		value += ir * w;
		weightSum += w;
	}

	if(weightSum > kEpsilonF32)
	{
		value /= weightSum;
	}
	else
	{
		value = 0.0;
	}

	return value;
}

Vec3 sampleClipmapIrradianceAccurate(Vec3 samplePoint, Vec3 normal, Vec3 cameraPos, Vec3 lookDir, Clipmap clipmaps[kIndirectDiffuseClipmapCount],
									 Texture3D<Vec4> volumes[kIndirectDiffuseClipmapCount],
									 Texture3D<Vec4> distanceMomentsVolumes[kIndirectDiffuseClipmapCount],
									 Texture3D<Vec4> probeValidityVolumes[kIndirectDiffuseClipmapCount], SamplerState linearAnyRepeatSampler,
									 F32 randFactor)
{
	return sampleClipmapIrradianceCommon(samplePoint, normal, cameraPos, lookDir, clipmaps, volumes, distanceMomentsVolumes, probeValidityVolumes,
										 linearAnyRepeatSampler, randFactor, false);
}

Vec3 sampleClipmapIrradianceCheap(Vec3 samplePoint, Vec3 normal, Clipmap clipmaps[kIndirectDiffuseClipmapCount],
								  Texture3D<Vec4> volumes[kIndirectDiffuseClipmapCount], SamplerState linearAnyRepeatSampler)
{
	return sampleClipmapIrradianceCommon(samplePoint, normal, samplePoint, samplePoint, clipmaps, volumes, volumes, volumes, linearAnyRepeatSampler,
										 0.0, true);
}

// ===========================================================================
// RayGen                                                                    =
// ===========================================================================
#if ANKI_RAY_GEN_SHADER

struct Consts
{
	U32 m_clipmapIdx;
	U32 m_radianceOctMapSize; // Don't use the mutator because we don't want to create may raygen variants
	F32 m_padding1;
	F32 m_padding2;
};
ANKI_FAST_CONSTANTS(Consts, g_consts)

[Shader("raygeneration")] void main()
{
	const Clipmap clipmap = g_globalRendererConstants.m_indirectDiffuseClipmaps[g_consts.m_clipmapIdx];

	// Compute probe info. Make sure you shoot coherent rays as much as possible by using the same direction on a specific wave
	const U32 outPixelIdx = DispatchRaysIndex().x / clipmap.m_probeCountTotal;
	const U32 probeIdx = DispatchRaysIndex().x % clipmap.m_probeCountTotal;

	UVec3 probe3dIdx;
	unflatten3dArrayIndex(clipmap.m_probeCounts.z, clipmap.m_probeCounts.y, clipmap.m_probeCounts.x, probeIdx, probe3dIdx.z, probe3dIdx.y,
						  probe3dIdx.x);

	const Vec3 probeSize = clipmap.m_size / clipmap.m_probeCounts;
	const Vec3 probeWorldPos = probe3dIdx * probeSize + probeSize * 0.5 + clipmap.m_aabbMin;

	// Generate direction
	const U32 checkerboardIdx = g_globalRendererConstants.m_frame % 4;
	const U32 sampleIdx = (g_globalRendererConstants.m_frame / 4) % 8;
	const U32 halfRadianceOctMapSize = g_consts.m_radianceOctMapSize / 2;
	UVec2 radianceOctCoord = UVec2(outPixelIdx % halfRadianceOctMapSize, outPixelIdx / halfRadianceOctMapSize);
	radianceOctCoord *= 2u; // Because there is one output pixel every 4 radiance oct map pixels
	radianceOctCoord.x += checkerboardIdx & 1u;
	radianceOctCoord.y += checkerboardIdx >> 1u;
	ANKI_ASSERT(all(radianceOctCoord < g_consts.m_radianceOctMapSize));
	const Vec2 sampleCoord = radianceOctCoord + 0.5 + generateMsaa8x(sampleIdx) / (8.0 * 2.0);
	const HVec3 dir = octahedronDecode(sampleCoord / g_consts.m_radianceOctMapSize);

	// Trace
	const F32 tMax = 1000.0; // TODO
	constexpr U32 traceFlags = RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES;
	GBufferLight<F16> gbuffer = (GBufferLight<F16>)0;
	F32 rayT = 0.0;
	Bool backfacing = false;
	const Bool hit = materialRayTrace<F16>(probeWorldPos, dir, 0.0, tMax, 1000.0, gbuffer, rayT, backfacing, traceFlags);

	HVec3 radiance;
	if(backfacing)
	{
		radiance = HVec3(1.0, 0.0, 1.0);
	}
	else
	{
		const Vec3 hitPos = probeWorldPos + dir * (rayT - 0.01);
		radiance = directLighting<F16>(gbuffer, hitPos, !hit, true, tMax, traceFlags | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH);
	}

	// Store result
	const F32 kMaxDist = 1000.0; // Chose something small and make sure its square doesn't overflow F16
	TEX(g_lightResultTex, UVec2(probeIdx, outPixelIdx)) = HVec4(radiance, min(rayT, kMaxDist));
}
#endif // ANKI_RAY_GEN_SHADER

// ===========================================================================
// PopulateCaches                                                            =
// ===========================================================================
#if NOT_ZERO(ANKI_TECHNIQUE_PopulateCaches)
Texture2D<Vec4> g_rtResultTex : register(t0);

RWTexture3D<Vec4> g_radianceVolume : register(u0);
RWTexture3D<Vec4> g_distanceMomentsVolume : register(u1);
RWTexture3D<Vec4> g_probeValidiryVolume : register(u2);

ConstantBuffer<GlobalRendererConstants> g_globalRendererConstants : register(b0);

struct Consts
{
	U32 m_clipmapIdx;
	U32 m_padding1;
	U32 m_padding2;
	U32 m_padding3;
};
ANKI_FAST_CONSTANTS(Consts, g_consts)

[NumThreads(64, 1, 1)] void main(COMPUTE_ARGS)
{
	const Clipmap clipmap = g_globalRendererConstants.m_indirectDiffuseClipmaps[g_consts.m_clipmapIdx];

	const U32 halfRadianceOctMapSize = RADIANCE_OCTAHEDRON_MAP_SIZE / 2;
	const U32 raysPerProbePerFrame = square(halfRadianceOctMapSize);

	const U32 rtPixelIdx = svDispatchThreadId.x % raysPerProbePerFrame;
	const U32 probeIdx = svDispatchThreadId.x / raysPerProbePerFrame;
	if(probeIdx >= clipmap.m_probeCountTotal)
	{
		return;
	}

	const Vec3 probeSize = clipmap.m_size / clipmap.m_probeCounts;
	UVec3 probe3dIdx;
	unflatten3dArrayIndex(clipmap.m_probeCounts.z, clipmap.m_probeCounts.y, clipmap.m_probeCounts.x, probeIdx, probe3dIdx.z, probe3dIdx.y,
						  probe3dIdx.x);
	const Vec3 probeWorldPos = probe3dIdx * probeSize + probeSize * 0.5 + clipmap.m_aabbMin;
	const Bool blendWithHistory = all(probeWorldPos > clipmap.m_prevFrameAabbMin) && all(probeWorldPos < clipmap.m_prevFrameAabbMin + clipmap.m_size);

	UVec3 noOctTexCoord = frac(probeWorldPos / clipmap.m_size) * clipmap.m_probeCounts;
	noOctTexCoord = min(noOctTexCoord, clipmap.m_probeCounts - 1u);
	noOctTexCoord = noOctTexCoord.xzy;

	// Read the result from RT
	const HVec4 comp = TEX(g_rtResultTex, UVec2(probeIdx, rtPixelIdx));
	HVec3 radiance = comp.xyz;
	const Vec2 moments = Vec2(comp.w, square(comp.w));
	if(all(radiance == HVec3(1.0, 0.0, 1.0)))
	{
		radiance = 0.0;
	}

	// Update the radiance and distance moments volumes
	{
		// Compute oct coord
		const U32 checkerboardIdx = g_globalRendererConstants.m_frame % 4;

		UVec2 radianceOctCoord = UVec2(rtPixelIdx % halfRadianceOctMapSize, rtPixelIdx / halfRadianceOctMapSize);
		radianceOctCoord *= 2u; // Because there is one output pixel every 4 radiance oct map pixels
		radianceOctCoord.x += checkerboardIdx & 1u;
		radianceOctCoord.y += checkerboardIdx >> 1u;
		ANKI_ASSERT(all(radianceOctCoord < RADIANCE_OCTAHEDRON_MAP_SIZE));

		UVec3 actualVolumeTexCoord;
		actualVolumeTexCoord.xy = radianceOctCoord + noOctTexCoord * (RADIANCE_OCTAHEDRON_MAP_SIZE + 2) + 1;
		actualVolumeTexCoord.z = noOctTexCoord.z;

		HVec3 avgRadiance = 0.0;
		Vec2 avgMoments = 0.0;
		if(blendWithHistory)
		{
			const F32 blendFactor = 0.1;

			const HVec3 prevValue = TEX(g_radianceVolume, actualVolumeTexCoord).xyz;
			avgRadiance = lerp(prevValue, radiance, blendFactor);

			const Vec2 prevValue2 = TEX(g_distanceMomentsVolume, actualVolumeTexCoord).xy;
			avgMoments = lerp(prevValue2, moments, blendFactor);
		}
		else
		{
			avgRadiance = radiance;
			avgMoments = moments;
		}

		TEX(g_radianceVolume, actualVolumeTexCoord).xyz = avgRadiance;
		TEX(g_distanceMomentsVolume, actualVolumeTexCoord).xy = avgMoments;

		// Set oct borders
		IVec2 borders[3];
		const U32 borderCount = octahedronBorder(RADIANCE_OCTAHEDRON_MAP_SIZE, radianceOctCoord, borders);
		for(U32 i = 0; i < borderCount; ++i)
		{
			IVec3 actualVolumeTexCoord;
			actualVolumeTexCoord.xy = radianceOctCoord + noOctTexCoord * (RADIANCE_OCTAHEDRON_MAP_SIZE + 2) + 1;
			actualVolumeTexCoord.xy += borders[i];
			actualVolumeTexCoord.z = noOctTexCoord.z;

			TEX(g_radianceVolume, actualVolumeTexCoord).xyz = avgRadiance;
			TEX(g_distanceMomentsVolume, actualVolumeTexCoord).xy = avgMoments;
		}

		// Set the texels of the oct that don't have a valid value
		if(!blendWithHistory)
		{
			for(U32 otherCheckerboardIdx = 0; otherCheckerboardIdx < 4; ++otherCheckerboardIdx)
			{
				if(otherCheckerboardIdx == checkerboardIdx)
				{
					continue;
				}

				UVec2 otherOctCoord = UVec2(rtPixelIdx % halfRadianceOctMapSize, rtPixelIdx / halfRadianceOctMapSize);
				otherOctCoord *= 2u;
				otherOctCoord.x += otherCheckerboardIdx & 1u;
				otherOctCoord.y += otherCheckerboardIdx >> 1u;

				UVec3 actualVolumeTexCoord;
				actualVolumeTexCoord.xy = otherOctCoord + noOctTexCoord * (RADIANCE_OCTAHEDRON_MAP_SIZE + 2) + 1;
				actualVolumeTexCoord.z = noOctTexCoord.z;

				TEX(g_radianceVolume, actualVolumeTexCoord).xyz = avgRadiance;
				TEX(g_distanceMomentsVolume, actualVolumeTexCoord).xy = avgMoments;

				// Set oct borders
				IVec2 borders[3];
				const U32 borderCount = octahedronBorder(RADIANCE_OCTAHEDRON_MAP_SIZE, otherOctCoord, borders);
				for(U32 i = 0; i < borderCount; ++i)
				{
					IVec3 actualVolumeTexCoord;
					actualVolumeTexCoord.xy = otherOctCoord + noOctTexCoord * (RADIANCE_OCTAHEDRON_MAP_SIZE + 2) + 1;
					actualVolumeTexCoord.xy += borders[i];
					actualVolumeTexCoord.z = noOctTexCoord.z;

					TEX(g_radianceVolume, actualVolumeTexCoord).xyz = avgRadiance;
					TEX(g_distanceMomentsVolume, actualVolumeTexCoord).xy = avgMoments;
				}
			}
		}
	}

	// Update probe validity
	if(rtPixelIdx == 0)
	{
		F32 invalidRayCount = 0.0;
		for(U32 i = 0; i < raysPerProbePerFrame; ++i)
		{
			const HVec3 radiance = TEX(g_rtResultTex, UVec2(probeIdx, i));
			if(all(radiance == HVec3(1.0, 0.0, 1.0)))
			{
				invalidRayCount += 1.0;
			}
		}

		F32 valid = 1.0 - min(1.0, invalidRayCount / F32(raysPerProbePerFrame / 4));
		if(blendWithHistory)
		{
			const F32 prev = TEX(g_probeValidiryVolume, noOctTexCoord).x;
			valid = lerp(prev, valid, 0.05);
		}
		TEX(g_probeValidiryVolume, noOctTexCoord).x = valid;
	}
}
#endif

// ===========================================================================
// ComputeIrradiance                                                         =
// ===========================================================================
#if NOT_ZERO(ANKI_TECHNIQUE_ComputeIrradiance)

struct Consts
{
	U32 m_clipmapIdx;
	U32 m_padding1;
	U32 m_padding2;
	U32 m_padding3;
};
ANKI_FAST_CONSTANTS(Consts, g_consts)

constexpr U32 kThreadCount = GPU_WAVE_SIZE;

Texture3D<Vec4> g_radianceVolume : register(t0);

RWTexture3D<Vec4> g_irradianceVolume : register(u0);

ConstantBuffer<GlobalRendererConstants> g_globalRendererConstants : register(b0);

groupshared Vec3 g_irradianceResults[kThreadCount];

[NumThreads(kThreadCount, 1, 1)] void main(COMPUTE_ARGS)
{
	const Clipmap clipmap = g_globalRendererConstants.m_indirectDiffuseClipmaps[g_consts.m_clipmapIdx];
	const U32 probeIdx = svGroupId.x;
	const UVec2 irradianceTexel = svGroupId.yz;

	// Compute input radiance coordinates
	UVec3 radianceTexelCoordStart;
	unflatten3dArrayIndex(clipmap.m_probeCounts.z, clipmap.m_probeCounts.y, clipmap.m_probeCounts.x, probeIdx, radianceTexelCoordStart.z,
						  radianceTexelCoordStart.y, radianceTexelCoordStart.x);
	radianceTexelCoordStart = radianceTexelCoordStart.xzy;
	radianceTexelCoordStart.xy *= RADIANCE_OCTAHEDRON_MAP_SIZE + 2;
	radianceTexelCoordStart.xy += 1;

	// Compute irradiance
	Vec2 octUv = Vec2(irradianceTexel);
	octUv += 0.5;
	octUv /= IRRADIANCE_OCTAHEDRON_MAP_SIZE;
	const Vec3 dir = octahedronDecode(octUv);

	const U32 radianceTexelCount = RADIANCE_OCTAHEDRON_MAP_SIZE * RADIANCE_OCTAHEDRON_MAP_SIZE;
	const U32 radiancePixelsPerThread = (radianceTexelCount + kThreadCount - 1) / kThreadCount;

	Vec3 irradiance = 0.0;
	for(U32 pixel = svGroupIndex * radiancePixelsPerThread; pixel < min(radianceTexelCount, (svGroupIndex + 1) * radiancePixelsPerThread); ++pixel)
	{
		Vec2 octUv = Vec2(pixel % RADIANCE_OCTAHEDRON_MAP_SIZE, pixel / RADIANCE_OCTAHEDRON_MAP_SIZE);
		octUv += 0.5;
		octUv /= RADIANCE_OCTAHEDRON_MAP_SIZE;

		const Vec3 sampleDir = octahedronDecode(octUv);

		const F32 lambert = dot(dir, sampleDir);
		if(lambert <= kEpsilonF32)
		{
			continue;
		}

		UVec3 coord = radianceTexelCoordStart;
		coord.x += pixel % RADIANCE_OCTAHEDRON_MAP_SIZE + 1;
		coord.y += pixel / RADIANCE_OCTAHEDRON_MAP_SIZE + 1;

		const Vec3 radiance = TEX(g_radianceVolume, coord).xyz;

		const F32 sampleCount = square(F32(RADIANCE_OCTAHEDRON_MAP_SIZE)) / 2.0;
		irradiance += radiance * lambert / sampleCount;
	}

	g_irradianceResults[svGroupIndex] = irradiance;

	GroupMemoryBarrierWithGroupSync();

	[loop] for(U32 s = kThreadCount / 2u; s > 0u; s >>= 1u)
	{
		if(svGroupIndex < s)
		{
			g_irradianceResults[svGroupIndex] += g_irradianceResults[svGroupIndex + s];
		}

#	if ANKI_PLATFORM_MOBILE
		if(s > WaveGetLaneCount())
		{
			GroupMemoryBarrierWithGroupSync();
		}
#	else
		GroupMemoryBarrierWithGroupSync();
#	endif
	}

	if(svGroupIndex == 0)
	{
		irradiance = g_irradianceResults[0] * k2Pi;

		// Compute the texel coord to write the output
		UVec3 irradianceTexelCoord;
		unflatten3dArrayIndex(clipmap.m_probeCounts.z, clipmap.m_probeCounts.y, clipmap.m_probeCounts.x, probeIdx, irradianceTexelCoord.z,
							  irradianceTexelCoord.y, irradianceTexelCoord.x);
		irradianceTexelCoord = irradianceTexelCoord.xzy;
		irradianceTexelCoord.xy *= IRRADIANCE_OCTAHEDRON_MAP_SIZE + 2;
		irradianceTexelCoord.xy += 1;
		irradianceTexelCoord.x += irradianceTexel.x;
		irradianceTexelCoord.y += irradianceTexel.y;

		TEX(g_irradianceVolume, irradianceTexelCoord).xyz = irradiance;

		// Write the borders
		UVec3 volumeTexCoord;
		unflatten3dArrayIndex(clipmap.m_probeCounts.z, clipmap.m_probeCounts.y, clipmap.m_probeCounts.x, probeIdx, volumeTexCoord.z, volumeTexCoord.y,
							  volumeTexCoord.x);
		volumeTexCoord = volumeTexCoord.xzy;

		IVec2 borders[3];
		const IVec2 octCoord = IVec2(irradianceTexel);
		const U32 borderCount = octahedronBorder(IRRADIANCE_OCTAHEDRON_MAP_SIZE, octCoord, borders);
		for(U32 i = 0; i < borderCount; ++i)
		{
			IVec3 actualVolumeTexCoord;
			actualVolumeTexCoord.xy = octCoord + volumeTexCoord * (IRRADIANCE_OCTAHEDRON_MAP_SIZE + 2) + 1;
			actualVolumeTexCoord.xy += borders[i];
			actualVolumeTexCoord.z = volumeTexCoord.z;

			TEX(g_irradianceVolume, actualVolumeTexCoord).xyz = irradiance;
		}
	}
}
#endif

// ===========================================================================
// Test                                                                      =
// ===========================================================================
#if NOT_ZERO(ANKI_TECHNIQUE_Test)
Texture2D<Vec4> g_depthTex : register(t0);
Texture2D<Vec4> g_gbufferRt2 : register(t1);

Texture2D<Vec4> g_blueNoiseTex : register(t2);

Texture3D<Vec4> g_clipmapVolumes[kIndirectDiffuseClipmapCount] : register(t3);
Texture3D<Vec4> g_probeValidityVolumes[kIndirectDiffuseClipmapCount] : register(t6); // WARNING: Adjust if kIndirectDiffuseClipmapCount changed
Texture3D<Vec4> g_distanceMomentsVolumes[kIndirectDiffuseClipmapCount] : register(t9);

RWTexture2D<Vec4> g_outTex : register(u0);

ConstantBuffer<GlobalRendererConstants> g_globalRendererConstants : register(b0);

SamplerState g_linearAnyRepeatSampler : register(s0);

[NumThreads(8, 8, 1)] void main(COMPUTE_ARGS)
{
	UVec2 viewportSize;
	g_outTex.GetDimensions(viewportSize.x, viewportSize.y);

	if(any(svDispatchThreadId >= viewportSize))
	{
		return;
	}

	const F32 depth = g_depthTex[svDispatchThreadId.xy].r;
	const Vec2 uv = Vec2(svDispatchThreadId.xy) / Vec2(viewportSize);
	const Vec2 ndc = uvToNdc(uv);
	const Vec4 worldPos4 = mul(g_globalRendererConstants.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, depth, 1.0));
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	const Vec3 normal = unpackNormalFromGBuffer(g_gbufferRt2[svDispatchThreadId.xy]);

	// Rand
	UVec2 noiseTexSize;
	g_blueNoiseTex.GetDimensions(noiseTexSize.x, noiseTexSize.y);
	Vec3 noise3 = g_blueNoiseTex[svDispatchThreadId % noiseTexSize];
	noise3 = animateBlueNoise(noise3, g_globalRendererConstants.m_frame);
	const F32 noise = noise3.x;

	const Mat3x4 cameraTrf = g_globalRendererConstants.m_matrices.m_cameraTransform;
	const Vec3 lookDir = -Vec3(cameraTrf.m_row0[2], cameraTrf.m_row1[2], cameraTrf.m_row2[2]);

#	if 1
	const Vec3 irradiance = sampleClipmapIrradianceAccurate(worldPos, normal, g_globalRendererConstants.m_cameraPosition, lookDir,
															g_globalRendererConstants.m_indirectDiffuseClipmaps, g_clipmapVolumes,
															g_distanceMomentsVolumes, g_probeValidityVolumes, g_linearAnyRepeatSampler, noise);
#	else
	const Vec3 irradiance = sampleClipmapIrradianceCheap(worldPos, normal, g_globalRendererConstants.m_indirectDiffuseClipmaps, g_clipmapVolumes,
														 g_linearAnyRepeatSampler);
#	endif

	g_outTex[svDispatchThreadId.xy].xyz = irradiance;
}
#endif

// ===========================================================================
// VisualizeProbes                                                           =
// ===========================================================================
#if NOT_ZERO(ANKI_TECHNIQUE_VisualizeProbes)

struct VertIn
{
	U32 m_svVertexId : SV_VertexID;
	U32 m_svInstanceId : SV_InstanceID;
};

struct VertOut
{
	Vec4 m_svPosition : SV_Position;

	Vec3 m_probeCenter : PROBE_CENTER;
};

struct FragOut
{
	Vec4 m_color : SV_Target0;
	F32 m_svDepth : SV_Depth;
};

struct Consts
{
	U32 m_clipmapIdx;
	U32 m_padding1;
	U32 m_padding2;
	U32 m_padding3;
};
ANKI_FAST_CONSTANTS(Consts, g_consts)

ConstantBuffer<GlobalRendererConstants> g_globalRendererConstants : register(b0);

Texture3D<Vec4> g_volume : register(t0);
Texture3D<Vec4> g_probeValidityVolume : register(t1);

SamplerState g_linearAnyRepeatSampler : register(s0);

constexpr F32 kSphereRadius = 0.05;

#	if ANKI_VERTEX_SHADER
// Cube vertex positions indexed via SV_VertexID
constexpr Vec3 cubeVertices[8] = {Vec3(-1, -1, -1), Vec3(1, -1, -1), Vec3(1, 1, -1), Vec3(-1, 1, -1),
								  Vec3(-1, -1, 1),  Vec3(1, -1, 1),  Vec3(1, 1, 1),  Vec3(-1, 1, 1)};

// Index order for drawing the cube as a triangle list (36 indices, 12 triangles)
constexpr U32 cubeIndices[36] = {0, 1, 2, 2, 3, 0, 1, 5, 6, 6, 2, 1, 5, 4, 7, 7, 6, 5, 4, 0, 3, 3, 7, 4, 3, 2, 6, 6, 7, 3, 4, 5, 1, 1, 0, 4};

VertOut main(VertIn input)
{
	const Clipmap clipmap = g_globalRendererConstants.m_indirectDiffuseClipmaps[g_consts.m_clipmapIdx];
	const Vec3 camPos = g_globalRendererConstants.m_cameraPosition;

	UVec3 probeCoord;
	unflatten3dArrayIndex(clipmap.m_probeCounts.z, clipmap.m_probeCounts.y, clipmap.m_probeCounts.x, input.m_svInstanceId, probeCoord.z, probeCoord.y,
						  probeCoord.x);

	const Vec3 probeSize = clipmap.m_size / clipmap.m_probeCounts;
	const Vec3 probeWorldPos = probeCoord * probeSize + probeSize * 0.5 + clipmap.m_aabbMin;

	// Vert pos
	const U32 index = cubeIndices[input.m_svVertexId];
	Vec3 vertPos = cubeVertices[index];
	vertPos *= kSphereRadius;
	vertPos += probeWorldPos;

	VertOut output;
	output.m_svPosition = mul(g_globalRendererConstants.m_matrices.m_viewProjectionJitter, Vec4(vertPos, 1.0));
	output.m_probeCenter = probeWorldPos;

	return output;
}
#	endif // ANKI_VERTEX_SHADER

#	if ANKI_PIXEL_SHADER
FragOut main(VertOut input)
{
	const Clipmap clipmap = g_globalRendererConstants.m_indirectDiffuseClipmaps[g_consts.m_clipmapIdx];

	FragOut output;

	// Compute the far point
	const Vec2 ndc = uvToNdc(input.m_svPosition.xy / g_globalRendererConstants.m_renderingSize);
	const Vec4 v4 = mul(g_globalRendererConstants.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, 1.0, 1.0));
	const Vec3 farPoint = v4.xyz / v4.w;

	// Do sphere to view vec collision
	const Vec3 rayDir = normalize(farPoint - g_globalRendererConstants.m_cameraPosition);
	F32 t0, t1;
	const Bool collides = testRaySphere(g_globalRendererConstants.m_cameraPosition, rayDir, input.m_probeCenter, kSphereRadius, t0, t1);

	if(!collides)
	{
		discard;
	}

	const F32 t = min(t0, t1);
	const Vec3 collisionPoint = g_globalRendererConstants.m_cameraPosition + rayDir * t;

	const Vec4 p = mul(g_globalRendererConstants.m_matrices.m_viewProjectionJitter, Vec4(collisionPoint, 1.0));
	output.m_svDepth = p.z / p.w;

	const Vec3 normal = normalize(collisionPoint - input.m_probeCenter);

	UVec3 texSize;
	g_volume.GetDimensions(texSize.x, texSize.y, texSize.z);
	const U32 octProbeSize = texSize.x / clipmap.m_probeCounts.x - 2;

	Vec3 uvw = frac(input.m_probeCenter.xzy / clipmap.m_size.xzy);
	const UVec3 texelCoord = uvw * clipmap.m_probeCounts.xzy;

	uvw.xy = texelCoord.xy * (octProbeSize + 2);
	uvw.xy += octahedronEncode(normal) * octProbeSize + 1.0;
	uvw.xy /= clipmap.m_probeCounts.xz * (octProbeSize + 2);

	uvw.z = (texelCoord.z + 0.5) / clipmap.m_probeCounts.y;

	const Bool valid = g_probeValidityVolume[texelCoord].x > 0.9;
	Vec3 radiance;
	if(valid)
	{
		radiance = g_volume.SampleLevel(g_linearAnyRepeatSampler, uvw, 0.0).xyz;
	}
	else
	{
		radiance = Vec3(1.0, 0.0, 1.0);
	}

	output.m_color = Vec4(radiance, 0.0);
	return output;
}
#	endif // ANKI_PIXEL_SHADER

#endif
