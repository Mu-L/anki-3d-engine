// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki 16bit

#pragma anki mutator GPU_WAVE_SIZE 16 32 64
#pragma anki mutator RADIANCE_OCTAHEDRON_MAP_SIZE 8 10 12 14 16 18 20
#pragma anki mutator IRRADIANCE_OCTAHEDRON_MAP_SIZE 4 5 6
#pragma anki mutator RT_MATERIAL_FETCH_CLIPMAP 0 1

#pragma anki technique RtMaterialFetch rgen mutators RT_MATERIAL_FETCH_CLIPMAP
#pragma anki technique PopulateCaches comp mutators RADIANCE_OCTAHEDRON_MAP_SIZE
#pragma anki technique ComputeIrradiance comp mutators GPU_WAVE_SIZE RADIANCE_OCTAHEDRON_MAP_SIZE IRRADIANCE_OCTAHEDRON_MAP_SIZE
#pragma anki technique Apply comp mutators
#pragma anki technique VisualizeProbes vert pixel mutators

#define ANKI_ASSERTIONS_ENABLED 1

#include <AnKi/Shaders/Include/GpuSceneTypes.h>
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/Include/MiscRendererTypes.h>
#include <AnKi/Shaders/ImportanceSampling.hlsl>
#include <AnKi/Shaders/PackFunctions.hlsl>
#include <AnKi/Shaders/FastMathFunctions.hlsl>
#include <AnKi/Shaders/IndirectDiffuseClipmaps.hlsl>

#if defined(RT_MATERIAL_FETCH_CLIPMAP) && RT_MATERIAL_FETCH_CLIPMAP
#	define CLIPMAP_VOLUME
#endif
#include <AnKi/Shaders/RtMaterialFetch.hlsl>

Vec2 generateRandomUv(U32 sampleIdx, U32 sampleCount, U32 frame)
{
	const UVec3 r = rand3DPCG16(UVec3(frame % 8u, frame % 4u, frame % 16u));
	return hammersleyRandom16(sampleIdx, sampleCount, r);
}

HVec3 generateRandomPointInSphere(U32 sampleIdx, U32 sampleCount, U32 frame)
{
	return octahedronDecode(generateRandomUv(sampleIdx, sampleCount, frame));
}

// ===========================================================================
// RtMaterialFetch                                                           =
// ===========================================================================
#if NOT_ZERO(ANKI_TECHNIQUE_RtMaterialFetch)

#	if RT_MATERIAL_FETCH_CLIPMAP
struct Consts
{
	U32 m_clipmapIdx;
	U32 m_radianceOctMapSize; // Don't use the mutator because we don't want to create may raygen variants
	F32 m_padding1;
	F32 m_padding2;
};
ANKI_FAST_CONSTANTS(Consts, g_consts)

[Shader("raygeneration")] void main()
{
	const Clipmap clipmap = g_globalRendererConstants.m_indirectDiffuseClipmaps[g_consts.m_clipmapIdx];

	// Compute probe info. Make sure you shoot coherent rays as much as possible by using the same direction on a specific wave
	const U32 outPixelIdx = DispatchRaysIndex().x / clipmap.m_probeCountTotal;
	const U32 probeIdx = DispatchRaysIndex().x % clipmap.m_probeCountTotal;

	UVec3 probe3dIdx;
	unflatten3dArrayIndex(clipmap.m_probeCounts.z, clipmap.m_probeCounts.y, clipmap.m_probeCounts.x, probeIdx, probe3dIdx.z, probe3dIdx.y,
						  probe3dIdx.x);

	const Vec3 probeSize = clipmap.m_size / clipmap.m_probeCounts;
	const Vec3 probeWorldPos = probe3dIdx * probeSize + probeSize * 0.5 + clipmap.m_aabbMin;

	// Generate direction
	const U32 checkerboardIdx = g_globalRendererConstants.m_frame % 4;
	const U32 sampleIdx = (g_globalRendererConstants.m_frame / 4) % 8;
	const U32 halfRadianceOctMapSize = g_consts.m_radianceOctMapSize / 2;
	UVec2 radianceOctCoord = UVec2(outPixelIdx % halfRadianceOctMapSize, outPixelIdx / halfRadianceOctMapSize);
	radianceOctCoord *= 2u; // Because there is one output pixel every 4 radiance oct map pixels
	radianceOctCoord.x += checkerboardIdx & 1u;
	radianceOctCoord.y += checkerboardIdx >> 1u;
	ANKI_ASSERT(all(radianceOctCoord < g_consts.m_radianceOctMapSize));
	const Vec2 sampleCoord = radianceOctCoord + 0.5 + generateMsaa8x(sampleIdx) / (8.0 * 2.0);
	const HVec3 dir = octahedronDecode(sampleCoord / g_consts.m_radianceOctMapSize);

	// Trace
	const F32 tMax = 1000.0; // TODO
	constexpr U32 traceFlags = RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES;
	GBufferLight<F16> gbuffer = (GBufferLight<F16>)0;
	F32 rayT = 0.0;
	Bool backfacing = false;
	const Bool hit = materialRayTrace<F16>(probeWorldPos, dir, 0.0, tMax, 1000.0, gbuffer, rayT, backfacing, traceFlags);

	HVec3 radiance;
	if(backfacing)
	{
		radiance = HVec3(1.0, 0.0, 1.0);
	}
	else
	{
		const Vec3 hitPos = probeWorldPos + dir * (rayT - 0.01);
		radiance = directLighting<F16>(gbuffer, hitPos, !hit, true, tMax, traceFlags | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH);

		// Apply indirect
#		if 0
		const Mat3x4 cameraTrf = g_globalRendererConstants.m_matrices.m_cameraTransform;
		const Vec3 lookDir = -Vec3(cameraTrf.m_row0[2], cameraTrf.m_row1[2], cameraTrf.m_row2[2]);
		const Vec3 irradiance = sampleClipmapIrradianceAccurate(hitPos, gbuffer.m_worldNormal, g_globalRendererConstants.m_cameraPosition, lookDir,
																g_globalRendererConstants.m_indirectDiffuseClipmaps, g_irradianceVolumes,
																g_distanceMomentsVolumes, g_probeValidityVolumes, g_linearAnyRepeatSampler, noise);
#		else
		Clipmap clipmaps[kIndirectDiffuseClipmapCount];
		for(U32 i = 0; i < kIndirectDiffuseClipmapCount; ++i)
		{
			clipmaps[i] = g_globalRendererConstants.m_indirectDiffuseClipmaps[i];
			clipmaps[i].m_aabbMin = clipmaps[i].m_prevFrameAabbMin;
		}
		const Vec3 irradiance = sampleClipmapIrradianceCheap(hitPos, gbuffer.m_worldNormal, clipmaps, g_irradianceVolumes, g_linearAnyRepeatSampler);
#		endif

		radiance += irradiance * gbuffer.m_diffuse / kPi;
	}

	// Store result
	const U32 raysPerProbePerFrame = square(g_consts.m_radianceOctMapSize / 2);
	const F32 kMaxDist = 1000.0; // Chose something small and make sure its square doesn't overflow F16
	TEX(g_lightResultTex, UVec2(probeIdx, outPixelIdx + raysPerProbePerFrame * g_consts.m_clipmapIdx)) = HVec4(radiance, min(rayT, kMaxDist));
}
#	else

struct Consts
{
	F32 m_rayMax;
	F32 m_padding1;
	F32 m_padding2;
	F32 m_padding3;
};
ANKI_FAST_CONSTANTS(Consts, g_consts)

[Shader("raygeneration")] void main()
{
	const UVec2 coord = DispatchRaysIndex().xy;
	const Vec2 uv = Vec2(coord) / DispatchRaysDimensions().xy;

	const F32 depth = g_depthTex[coord].x;
	const Vec4 rt2 = g_gbufferRt2[coord];
	const Vec3 worldNormal = unpackNormalFromGBuffer(rt2);

	const Vec4 v4 = mul(g_globalRendererConstants.m_matrices.m_invertedViewProjectionJitter, Vec4(uvToNdc(uv), depth, 1.0));
	const Vec3 worldPos = v4.xyz / v4.w;

	const Vec3 biasDir = normalize(g_globalRendererConstants.m_cameraPosition - worldPos);
	const Vec3 biasedWorldPos = worldPos + biasDir * 0.1;

	// Rand
	const UVec3 seed = rand3DPCG16(UVec3(coord, g_globalRendererConstants.m_frame % 8u));
	const Vec2 randFactors = hammersleyRandom16(g_globalRendererConstants.m_frame % 64u, 64u, seed);

	const Mat3 tbn = rotationFromDirection(worldNormal);
	const Vec3 rayDir = normalize(mul(tbn, hemisphereSampleCos(randFactors)));

	// Trace
	const F32 tMax = g_consts.m_rayMax;
	constexpr U32 traceFlags = RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES;
	GBufferLight<F16> gbuffer = (GBufferLight<F16>)0;
	F32 rayT = 0.0;
	Bool backfacing = false;
	const Bool hit = materialRayTrace<F16>(biasedWorldPos, rayDir, 0.01, tMax, 1000.0, gbuffer, rayT, backfacing, traceFlags);

	HVec3 radiance = 0.0;
	Vec3 hitPos = 0.0;
	if(hit)
	{
		hitPos = biasedWorldPos + rayDir * (rayT - 0.01);
		radiance = directLighting<F16>(gbuffer, hitPos, !hit, true, 1000.0, traceFlags | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH);
	}

	const Mat3x4 cameraTrf = g_globalRendererConstants.m_matrices.m_cameraTransform;
	const Vec3 lookDir = -Vec3(cameraTrf.m_row0[2], cameraTrf.m_row1[2], cameraTrf.m_row2[2]);

	const Vec3 rayOrigin = (hit) ? hitPos : biasedWorldPos;
	const Vec3 rayDir2 = (hit) ? gbuffer.m_worldNormal : worldNormal;
	const Bool biasSamplePoint = !hit; // Bias the sample point if it's not for the 2nd bounce
	const Vec3 irradiance = sampleClipmapIrradianceAccurate(
		rayOrigin, rayDir2, g_globalRendererConstants.m_cameraPosition, lookDir, g_globalRendererConstants.m_indirectDiffuseClipmaps,
		g_irradianceVolumes, g_distanceMomentsVolumes, g_probeValidityVolumes, g_linearAnyRepeatSampler, randFactors.x, biasSamplePoint);

	Vec3 final;
	if(hit)
	{
		final = radiance + irradiance * gbuffer.m_diffuse;
	}
	else
	{
		final = irradiance;
	}

	TEX(g_colorAndPdfTex, coord).xyz = final;
}
#	endif // RT_MATERIAL_FETCH_CLIPMAP
#endif

// ===========================================================================
// PopulateCaches                                                            =
// ===========================================================================
#if NOT_ZERO(ANKI_TECHNIQUE_PopulateCaches)
Texture2D<Vec4> g_rtResultTex : register(t0);

RWTexture3D<Vec4> g_radianceVolume : register(u0);
RWTexture3D<Vec4> g_distanceMomentsVolume : register(u1);
RWTexture3D<Vec4> g_probeValidiryVolume : register(u2);

ConstantBuffer<GlobalRendererConstants> g_globalRendererConstants : register(b0);

struct Consts
{
	U32 m_clipmapIdx;
	U32 m_padding1;
	U32 m_padding2;
	U32 m_padding3;
};
ANKI_FAST_CONSTANTS(Consts, g_consts)

[NumThreads(64, 1, 1)] void main(COMPUTE_ARGS)
{
	const Clipmap clipmap = g_globalRendererConstants.m_indirectDiffuseClipmaps[g_consts.m_clipmapIdx];

	const U32 halfRadianceOctMapSize = RADIANCE_OCTAHEDRON_MAP_SIZE / 2;
	const U32 raysPerProbePerFrame = square(halfRadianceOctMapSize);

	const U32 rtPixelIdx = svDispatchThreadId.x % raysPerProbePerFrame;
	const U32 probeIdx = svDispatchThreadId.x / raysPerProbePerFrame;
	if(probeIdx >= clipmap.m_probeCountTotal)
	{
		return;
	}

	const Vec3 probeSize = clipmap.m_size / clipmap.m_probeCounts;
	UVec3 probe3dIdx;
	unflatten3dArrayIndex(clipmap.m_probeCounts.z, clipmap.m_probeCounts.y, clipmap.m_probeCounts.x, probeIdx, probe3dIdx.z, probe3dIdx.y,
						  probe3dIdx.x);
	const Vec3 probeWorldPos = probe3dIdx * probeSize + probeSize * 0.5 + clipmap.m_aabbMin;
	const Bool blendWithHistory = all(probeWorldPos > clipmap.m_prevFrameAabbMin) && all(probeWorldPos < clipmap.m_prevFrameAabbMin + clipmap.m_size);

	UVec3 noOctTexCoord = frac(probeWorldPos / clipmap.m_size) * clipmap.m_probeCounts;
	noOctTexCoord = min(noOctTexCoord, clipmap.m_probeCounts - 1u);
	noOctTexCoord = noOctTexCoord.xzy;

	// Read the result from RT
	const HVec4 comp = TEX(g_rtResultTex, UVec2(probeIdx, rtPixelIdx + g_consts.m_clipmapIdx * raysPerProbePerFrame));
	HVec3 radiance = comp.xyz;
	const Vec2 moments = Vec2(comp.w, square(comp.w));
	if(all(radiance == HVec3(1.0, 0.0, 1.0)))
	{
		radiance = 0.0;
	}

	// Update the radiance and distance moments volumes
	{
		// Compute oct coord
		const U32 checkerboardIdx = g_globalRendererConstants.m_frame % 4;

		UVec2 radianceOctCoord = UVec2(rtPixelIdx % halfRadianceOctMapSize, rtPixelIdx / halfRadianceOctMapSize);
		radianceOctCoord *= 2u; // Because there is one output pixel every 4 radiance oct map pixels
		radianceOctCoord.x += checkerboardIdx & 1u;
		radianceOctCoord.y += checkerboardIdx >> 1u;
		ANKI_ASSERT(all(radianceOctCoord < RADIANCE_OCTAHEDRON_MAP_SIZE));

		UVec3 actualVolumeTexCoord;
		actualVolumeTexCoord.xy = radianceOctCoord + noOctTexCoord * (RADIANCE_OCTAHEDRON_MAP_SIZE + 2) + 1;
		actualVolumeTexCoord.z = noOctTexCoord.z;

		HVec3 avgRadiance = 0.0;
		Vec2 avgMoments = 0.0;
		if(blendWithHistory)
		{
			const F32 blendFactor = 0.1;

			const HVec3 prevValue = TEX(g_radianceVolume, actualVolumeTexCoord).xyz;
			avgRadiance = lerp(prevValue, radiance, blendFactor);

			const Vec2 prevValue2 = TEX(g_distanceMomentsVolume, actualVolumeTexCoord).xy;
			avgMoments = lerp(prevValue2, moments, blendFactor);
		}
		else
		{
			avgRadiance = radiance;
			avgMoments = moments;
		}

		TEX(g_radianceVolume, actualVolumeTexCoord).xyz = avgRadiance;
		TEX(g_distanceMomentsVolume, actualVolumeTexCoord).xy = avgMoments;

		// Set oct borders
		IVec2 borders[3];
		const U32 borderCount = octahedronBorder(RADIANCE_OCTAHEDRON_MAP_SIZE, radianceOctCoord, borders);
		for(U32 i = 0; i < borderCount; ++i)
		{
			IVec3 actualVolumeTexCoord;
			actualVolumeTexCoord.xy = radianceOctCoord + noOctTexCoord * (RADIANCE_OCTAHEDRON_MAP_SIZE + 2) + 1;
			actualVolumeTexCoord.xy += borders[i];
			actualVolumeTexCoord.z = noOctTexCoord.z;

			TEX(g_radianceVolume, actualVolumeTexCoord).xyz = avgRadiance;
			TEX(g_distanceMomentsVolume, actualVolumeTexCoord).xy = avgMoments;
		}

		// Set the texels of the oct that don't have a valid value
		if(!blendWithHistory)
		{
			for(U32 otherCheckerboardIdx = 0; otherCheckerboardIdx < 4; ++otherCheckerboardIdx)
			{
				if(otherCheckerboardIdx == checkerboardIdx)
				{
					continue;
				}

				UVec2 otherOctCoord = UVec2(rtPixelIdx % halfRadianceOctMapSize, rtPixelIdx / halfRadianceOctMapSize);
				otherOctCoord *= 2u;
				otherOctCoord.x += otherCheckerboardIdx & 1u;
				otherOctCoord.y += otherCheckerboardIdx >> 1u;

				UVec3 actualVolumeTexCoord;
				actualVolumeTexCoord.xy = otherOctCoord + noOctTexCoord * (RADIANCE_OCTAHEDRON_MAP_SIZE + 2) + 1;
				actualVolumeTexCoord.z = noOctTexCoord.z;

				TEX(g_radianceVolume, actualVolumeTexCoord).xyz = avgRadiance;
				TEX(g_distanceMomentsVolume, actualVolumeTexCoord).xy = avgMoments;

				// Set oct borders
				IVec2 borders[3];
				const U32 borderCount = octahedronBorder(RADIANCE_OCTAHEDRON_MAP_SIZE, otherOctCoord, borders);
				for(U32 i = 0; i < borderCount; ++i)
				{
					IVec3 actualVolumeTexCoord;
					actualVolumeTexCoord.xy = otherOctCoord + noOctTexCoord * (RADIANCE_OCTAHEDRON_MAP_SIZE + 2) + 1;
					actualVolumeTexCoord.xy += borders[i];
					actualVolumeTexCoord.z = noOctTexCoord.z;

					TEX(g_radianceVolume, actualVolumeTexCoord).xyz = avgRadiance;
					TEX(g_distanceMomentsVolume, actualVolumeTexCoord).xy = avgMoments;
				}
			}
		}
	}

	// Update probe validity
	if(rtPixelIdx == 0)
	{
		F32 invalidRayCount = 0.0;
		for(U32 i = 0; i < raysPerProbePerFrame; ++i)
		{
			const HVec3 radiance = TEX(g_rtResultTex, UVec2(probeIdx, i + g_consts.m_clipmapIdx * raysPerProbePerFrame));
			if(all(radiance == HVec3(1.0, 0.0, 1.0)))
			{
				invalidRayCount += 1.0;
			}
		}

		F32 valid = 1.0 - min(1.0, invalidRayCount / F32(raysPerProbePerFrame / 4));
		if(blendWithHistory)
		{
			const F32 prev = TEX(g_probeValidiryVolume, noOctTexCoord).x;
			valid = lerp(prev, valid, 0.05);
		}
		TEX(g_probeValidiryVolume, noOctTexCoord).x = valid;
	}
}
#endif

// ===========================================================================
// ComputeIrradiance                                                         =
// ===========================================================================
#if NOT_ZERO(ANKI_TECHNIQUE_ComputeIrradiance)

constexpr U32 kThreadCount = min(32, GPU_WAVE_SIZE); // Keep it bellow 32 to avoid threads doing no work

Texture3D<Vec4> g_radianceVolumes[kIndirectDiffuseClipmapCount] : register(t0);

RWTexture3D<Vec4> g_irradianceVolumes[kIndirectDiffuseClipmapCount] : register(u0);
RWTexture3D<Vec4> g_avgIrradianceVolumes[kIndirectDiffuseClipmapCount] : register(u3);

ConstantBuffer<GlobalRendererConstants> g_globalRendererConstants : register(b0);

SamplerState g_linearAnyRepeatSampler : register(s0);

groupshared U64Vec3 g_irradianceResults[IRRADIANCE_OCTAHEDRON_MAP_SIZE][IRRADIANCE_OCTAHEDRON_MAP_SIZE];

groupshared Vec3 g_avgIrradiance[kThreadCount];

void InterlockedAddColor(U32 x, U32 y, Vec3 color)
{
	[unroll] for(U32 i = 0; i < 3; ++i)
	{
		const F32 fracPart = frac(color[i]);
		const F32 intPart = color[i] - fracPart;

		U64 val = U64(intPart) << U64(32);
		val |= U64(fracPart * 10000.0);
		InterlockedAdd(g_irradianceResults[y][x][i], val);
	}
}

Vec3 decodeAtomicColor(U32 x, U32 y)
{
	Vec3 output;
	[unroll] for(U32 i = 0; i < 3; ++i)
	{
		const U64 val = g_irradianceResults[y][x][i];

		output[i] = F32(val >> U64(32));
		output[i] += F32(val & U64(kMaxU32)) / 10000.0;
	}
	return output;
}

// The group services a single probe. Every thread reads a radiance value and bins it to the appropreate irradiance pixel
[NumThreads(kThreadCount, 1, 1)] void main(COMPUTE_ARGS)
{
	const U32 clipmapIdx = svGroupId.x / g_globalRendererConstants.m_indirectDiffuseClipmaps[0].m_probeCounts[0];
	const UVec3 probeId = UVec3(svGroupId.x % g_globalRendererConstants.m_indirectDiffuseClipmaps[0].m_probeCounts[0], svGroupId.y, svGroupId.z);
	const Clipmap clipmap = g_globalRendererConstants.m_indirectDiffuseClipmaps[clipmapIdx];

	// Zero shared memory
	const U32 irradianceTexelCount = IRRADIANCE_OCTAHEDRON_MAP_SIZE * IRRADIANCE_OCTAHEDRON_MAP_SIZE;
	const U32 irradiancePixelsPerThread = (irradianceTexelCount + kThreadCount - 1) / kThreadCount;
	for(U32 pixel = svGroupIndex * irradiancePixelsPerThread; pixel < min(irradianceTexelCount, (svGroupIndex + 1) * irradiancePixelsPerThread);
		++pixel)
	{
		const U32 x = pixel % IRRADIANCE_OCTAHEDRON_MAP_SIZE;
		const U32 y = pixel / IRRADIANCE_OCTAHEDRON_MAP_SIZE;

		g_irradianceResults[y][x] = 0;
	}

	GroupMemoryBarrierWithGroupSync();

	// Iterate the radiance pixels of this thread and bin them to the irradiance texel. Use bilinear filtering to reduce the sample count
	UVec3 radianceTexelCoordStart = probeId.xzy;
	radianceTexelCoordStart.xy *= RADIANCE_OCTAHEDRON_MAP_SIZE + 2;
	radianceTexelCoordStart.xy += 1;
	const Vec3 radianceVolumeSize = clipmap.m_probeCounts.xzy * Vec3(RADIANCE_OCTAHEDRON_MAP_SIZE + 2, RADIANCE_OCTAHEDRON_MAP_SIZE + 2, 1.0);
	const Vec3 radianceTexelStartUv = (Vec3(radianceTexelCoordStart) + Vec3(0.0, 0.0, 0.5)) / radianceVolumeSize;

	const U32 halfRadianceOctMapSize = RADIANCE_OCTAHEDRON_MAP_SIZE / 2;
	const U32 radianceTexelCount = square(halfRadianceOctMapSize);
	const U32 radiancePixelsPerThread = (radianceTexelCount + kThreadCount - 1) / kThreadCount;
	for(U32 pixel = svGroupIndex * radiancePixelsPerThread; pixel < min(radianceTexelCount, (svGroupIndex + 1) * radiancePixelsPerThread); ++pixel)
	{
		Vec2 radianceOctUv = Vec2(pixel % halfRadianceOctMapSize, pixel / halfRadianceOctMapSize);
		radianceOctUv += 0.5;
		radianceOctUv /= halfRadianceOctMapSize;

		const Vec3 sampleDir = octahedronDecode(radianceOctUv);

		Vec3 uv = radianceTexelStartUv;
		uv.xy += radianceOctUv * RADIANCE_OCTAHEDRON_MAP_SIZE / radianceVolumeSize.xy;

		const Vec3 radiance = g_radianceVolumes[clipmapIdx].SampleLevel(g_linearAnyRepeatSampler, uv, 0.0).xyz;

		for(U32 irradiancePixelX = 0; irradiancePixelX < IRRADIANCE_OCTAHEDRON_MAP_SIZE; ++irradiancePixelX)
		{
			for(U32 irradiancePixelY = 0; irradiancePixelY < IRRADIANCE_OCTAHEDRON_MAP_SIZE; ++irradiancePixelY)
			{
				Vec2 irradianceOctUv = Vec2(irradiancePixelX, irradiancePixelY);
				irradianceOctUv += 0.5;
				irradianceOctUv /= IRRADIANCE_OCTAHEDRON_MAP_SIZE;
				const Vec3 dir = octahedronDecode(irradianceOctUv);

				const F32 lambert = dot(dir, sampleDir);
				if(lambert <= kEpsilonF32)
				{
					continue;
				}

				const F32 sampleCount = radianceTexelCount / 2.0;
				InterlockedAddColor(irradiancePixelX, irradiancePixelY, radiance * lambert / sampleCount);
			}
		}
	}

	GroupMemoryBarrierWithGroupSync();

	// Write the irradiance
	Vec3 threadAvgIrradiance = 0.0;
	for(U32 pixel = svGroupIndex * irradiancePixelsPerThread; pixel < min(irradianceTexelCount, (svGroupIndex + 1) * irradiancePixelsPerThread);
		++pixel)
	{
		const U32 x = pixel % IRRADIANCE_OCTAHEDRON_MAP_SIZE;
		const U32 y = pixel / IRRADIANCE_OCTAHEDRON_MAP_SIZE;

		UVec3 irradianceTexelCoord = probeId.xzy;
		irradianceTexelCoord.xy *= IRRADIANCE_OCTAHEDRON_MAP_SIZE + 2;
		irradianceTexelCoord.xy += 1;
		const IVec3 irradianceTexelCoordStart = irradianceTexelCoord;
		irradianceTexelCoord.x += x;
		irradianceTexelCoord.y += y;

		const Vec3 irradiance = decodeAtomicColor(x, y) * k2Pi;

		threadAvgIrradiance += irradiance / irradianceTexelCount;

		TEX(g_irradianceVolumes[clipmapIdx], irradianceTexelCoord).xyz = irradiance;

		// Write the borders
		IVec2 borders[3];
		const IVec2 octCoord = IVec2(x, y);
		const U32 borderCount = octahedronBorder(IRRADIANCE_OCTAHEDRON_MAP_SIZE, octCoord, borders);
		for(U32 i = 0; i < borderCount; ++i)
		{
			IVec3 actualVolumeTexCoord = irradianceTexelCoordStart;
			actualVolumeTexCoord.xy += octCoord + borders[i];

			TEX(g_irradianceVolumes[clipmapIdx], actualVolumeTexCoord).xyz = irradiance;
		}
	}

	g_avgIrradiance[svGroupIndex] = threadAvgIrradiance;

	GroupMemoryBarrierWithGroupSync();

	// Compute the avg radiance
	[loop] for(U32 s = kThreadCount / 2u; s > 0u; s >>= 1u)
	{
		if(svGroupIndex < s)
		{
			g_avgIrradiance[svGroupIndex] += g_avgIrradiance[svGroupIndex + s];
		}

#	if ANKI_PLATFORM_MOBILE
		if(s > WaveGetLaneCount())
		{
			GroupMemoryBarrierWithGroupSync();
		}
#	else
		GroupMemoryBarrierWithGroupSync();
#	endif
	}

	g_avgIrradianceVolumes[clipmapIdx][probeId.xzy].xyz = g_avgIrradiance[0];
}
#endif

// ===========================================================================
// Apply                                                                     =
// ===========================================================================
#if NOT_ZERO(ANKI_TECHNIQUE_Apply)
Texture2D<Vec4> g_depthTex : register(t0);
Texture2D<Vec4> g_gbufferRt2 : register(t1);

Texture2D<Vec4> g_blueNoiseTex : register(t2);

Texture3D<Vec4> g_clipmapVolumes[kIndirectDiffuseClipmapCount] : register(t3);
Texture3D<Vec4> g_probeValidityVolumes[kIndirectDiffuseClipmapCount] : register(t6); // WARNING: Adjust if kIndirectDiffuseClipmapCount changed
Texture3D<Vec4> g_distanceMomentsVolumes[kIndirectDiffuseClipmapCount] : register(t9);
Texture3D<Vec4> g_avgIrradianceVolumes[kIndirectDiffuseClipmapCount] : register(t12);

RWTexture2D<Vec4> g_outTex : register(u0);

ConstantBuffer<GlobalRendererConstants> g_globalRendererConstants : register(b0);

SamplerState g_linearAnyRepeatSampler : register(s0);

[NumThreads(8, 8, 1)] void main(COMPUTE_ARGS)
{
	UVec2 viewportSize;
	g_outTex.GetDimensions(viewportSize.x, viewportSize.y);

	if(any(svDispatchThreadId >= viewportSize))
	{
		return;
	}

	const F32 depth = g_depthTex[svDispatchThreadId.xy].r;
	const Vec2 uv = Vec2(svDispatchThreadId.xy) / Vec2(viewportSize);
	const Vec2 ndc = uvToNdc(uv);
	const Vec4 worldPos4 = mul(g_globalRendererConstants.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, depth, 1.0));
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	const Vec3 normal = unpackNormalFromGBuffer(g_gbufferRt2[svDispatchThreadId.xy]);

	// Rand
	UVec2 noiseTexSize;
	g_blueNoiseTex.GetDimensions(noiseTexSize.x, noiseTexSize.y);
	Vec3 noise3 = g_blueNoiseTex[svDispatchThreadId % noiseTexSize];
	noise3 = animateBlueNoise(noise3, g_globalRendererConstants.m_frame);
	const F32 noise = noise3.x;

	const Mat3x4 cameraTrf = g_globalRendererConstants.m_matrices.m_cameraTransform;
	const Vec3 lookDir = -Vec3(cameraTrf.m_row0[2], cameraTrf.m_row1[2], cameraTrf.m_row2[2]);

	const U32 method = 0;
	Vec3 irradiance;
	if(method == 0)
	{
		irradiance = sampleClipmapIrradianceAccurate(worldPos, normal, g_globalRendererConstants.m_cameraPosition, lookDir,
													 g_globalRendererConstants.m_indirectDiffuseClipmaps, g_clipmapVolumes, g_distanceMomentsVolumes,
													 g_probeValidityVolumes, g_linearAnyRepeatSampler, noise);
	}
	else if(method == 1)
	{
		irradiance = sampleClipmapIrradianceCheap(worldPos, normal, g_globalRendererConstants.m_indirectDiffuseClipmaps, g_clipmapVolumes,
												  g_linearAnyRepeatSampler);
	}
	else if(method == 2)
	{
		irradiance = sampleClipmapAvgIrradianceAccurate(worldPos, normal, g_globalRendererConstants.m_cameraPosition, lookDir,
														g_globalRendererConstants.m_indirectDiffuseClipmaps, g_avgIrradianceVolumes,
														g_distanceMomentsVolumes, g_probeValidityVolumes, g_linearAnyRepeatSampler, noise);
	}
	else
	{
		irradiance = sampleClipmapAvgIrradianceCheap(worldPos, g_globalRendererConstants.m_cameraPosition, lookDir,
													 g_globalRendererConstants.m_indirectDiffuseClipmaps, g_avgIrradianceVolumes, noise,
													 g_linearAnyRepeatSampler, true);
	}

	TEX(g_outTex, svDispatchThreadId.xy).xyz = irradiance;
}
#endif

// ===========================================================================
// VisualizeProbes                                                           =
// ===========================================================================
#if NOT_ZERO(ANKI_TECHNIQUE_VisualizeProbes)

struct VertIn
{
	U32 m_svVertexId : SV_VertexID;
	U32 m_svInstanceId : SV_InstanceID;
};

struct VertOut
{
	Vec4 m_svPosition : SV_Position;

	Vec3 m_probeCenter : PROBE_CENTER;
};

struct FragOut
{
	Vec4 m_color : SV_Target0;
	F32 m_svDepth : SV_Depth;
};

struct Consts
{
	U32 m_clipmapIdx;
	U32 m_padding1;
	U32 m_padding2;
	U32 m_padding3;
};
ANKI_FAST_CONSTANTS(Consts, g_consts)

ConstantBuffer<GlobalRendererConstants> g_globalRendererConstants : register(b0);

Texture3D<Vec4> g_volume : register(t0);
Texture3D<Vec4> g_probeValidityVolume : register(t1);

SamplerState g_linearAnyRepeatSampler : register(s0);

constexpr F32 kSphereRadius = 0.05;

#	if ANKI_VERTEX_SHADER
// Cube vertex positions indexed via SV_VertexID
constexpr Vec3 cubeVertices[8] = {Vec3(-1, -1, -1), Vec3(1, -1, -1), Vec3(1, 1, -1), Vec3(-1, 1, -1),
								  Vec3(-1, -1, 1),  Vec3(1, -1, 1),  Vec3(1, 1, 1),  Vec3(-1, 1, 1)};

// Index order for drawing the cube as a triangle list (36 indices, 12 triangles)
constexpr U32 cubeIndices[36] = {0, 1, 2, 2, 3, 0, 1, 5, 6, 6, 2, 1, 5, 4, 7, 7, 6, 5, 4, 0, 3, 3, 7, 4, 3, 2, 6, 6, 7, 3, 4, 5, 1, 1, 0, 4};

VertOut main(VertIn input)
{
	const Clipmap clipmap = g_globalRendererConstants.m_indirectDiffuseClipmaps[g_consts.m_clipmapIdx];
	const Vec3 camPos = g_globalRendererConstants.m_cameraPosition;

	UVec3 probeCoord;
	unflatten3dArrayIndex(clipmap.m_probeCounts.z, clipmap.m_probeCounts.y, clipmap.m_probeCounts.x, input.m_svInstanceId, probeCoord.z, probeCoord.y,
						  probeCoord.x);

	const Vec3 probeSize = clipmap.m_size / clipmap.m_probeCounts;
	const Vec3 probeWorldPos = probeCoord * probeSize + probeSize * 0.5 + clipmap.m_aabbMin;

	// Vert pos
	const U32 index = cubeIndices[input.m_svVertexId];
	Vec3 vertPos = cubeVertices[index];
	vertPos *= kSphereRadius;
	vertPos += probeWorldPos;

	VertOut output;
	output.m_svPosition = mul(g_globalRendererConstants.m_matrices.m_viewProjectionJitter, Vec4(vertPos, 1.0));
	output.m_probeCenter = probeWorldPos;

	return output;
}
#	endif // ANKI_VERTEX_SHADER

#	if ANKI_PIXEL_SHADER
FragOut main(VertOut input)
{
	const Clipmap clipmap = g_globalRendererConstants.m_indirectDiffuseClipmaps[g_consts.m_clipmapIdx];

	FragOut output;

	// Compute the far point
	const Vec2 ndc = uvToNdc(input.m_svPosition.xy / g_globalRendererConstants.m_renderingSize);
	const Vec4 v4 = mul(g_globalRendererConstants.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, 1.0, 1.0));
	const Vec3 farPoint = v4.xyz / v4.w;

	// Do sphere to view vec collision
	const Vec3 rayDir = normalize(farPoint - g_globalRendererConstants.m_cameraPosition);
	F32 t0, t1;
	const Bool collides = testRaySphere(g_globalRendererConstants.m_cameraPosition, rayDir, input.m_probeCenter, kSphereRadius, t0, t1);

	if(!collides)
	{
		discard;
	}

	const F32 t = min(t0, t1);
	const Vec3 collisionPoint = g_globalRendererConstants.m_cameraPosition + rayDir * t;

	const Vec4 p = mul(g_globalRendererConstants.m_matrices.m_viewProjectionJitter, Vec4(collisionPoint, 1.0));
	output.m_svDepth = p.z / p.w;

	UVec3 texSize;
	g_volume.GetDimensions(texSize.x, texSize.y, texSize.z);

	const Bool hasOctMap = texSize.x != clipmap.m_probeCounts.x;

	Vec3 uvw = frac(input.m_probeCenter.xzy / clipmap.m_size.xzy);
	const UVec3 texelCoord = uvw * clipmap.m_probeCounts.xzy;

	if(hasOctMap)
	{
		const U32 octProbeSize = texSize.x / clipmap.m_probeCounts.x - 2;

		const Vec3 normal = normalize(collisionPoint - input.m_probeCenter);

		uvw.xy = texelCoord.xy * (octProbeSize + 2);
		uvw.xy += octahedronEncode(normal) * octProbeSize + 1.0;
		uvw.xy /= clipmap.m_probeCounts.xz * (octProbeSize + 2);

		uvw.z = (texelCoord.z + 0.5) / clipmap.m_probeCounts.y;
	}
	else
	{
		uvw = texelCoord + 0.5;
		uvw /= texSize;
	}

	const Bool valid = TEX(g_probeValidityVolume, texelCoord).x > 0.9;
	Vec3 radiance;
	if(valid)
	{
		radiance = g_volume.SampleLevel(g_linearAnyRepeatSampler, uvw, 0.0).xyz;
	}
	else
	{
		radiance = Vec3(1.0, 0.0, 1.0);
	}

	output.m_color = Vec4(radiance, 0.0);
	return output;
}
#	endif // ANKI_PIXEL_SHADER

#endif
