// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki 16bit

#pragma anki technique RtMaterialFetch rgen
#pragma anki technique Test comp

#include <AnKi/Shaders/Include/GpuSceneTypes.h>
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/SH.hlsl>
#include <AnKi/Shaders/Include/MiscRendererTypes.h>
#include <AnKi/Shaders/ImportanceSampling.hlsl>
#include <AnKi/Shaders/PackFunctions.hlsl>
#include <AnKi/Shaders/SH.hlsl>
#include <AnKi/Shaders/IrradianceDice.hlsl>
#include <AnKi/Shaders/FastMathFunctions.hlsl>

#define CLIPMAP_VOLUME 1
#include <AnKi/Shaders/RtMaterialFetch.hlsl>

Vec3 worldPosToVolumeUvw(Clipmap clipmap, Vec3 worldPos)
{
	const Vec3 uvw = frac(worldPos / clipmap.m_size);
	return uvw;
}

UVec3 worldPosToVolumeTexel(Clipmap clipmap, Vec3 worldPos)
{
	const Vec3 uvw = worldPosToVolumeUvw(clipmap, worldPos);
	return uvw * clipmap.m_probeCounts;
}

void computeClipmapBounds(Clipmap clipmap, Vec3 cameraPos, out Vec3 aabbMin, out Vec3 aabbMax)
{
	const Vec3 halfSize = clipmap.m_size * 0.5;
	const Vec3 probeSize = clipmap.m_size / clipmap.m_probeCounts;
	const Vec3 roundedPos = round(cameraPos / probeSize) * probeSize;
	aabbMin = roundedPos - halfSize;
	aabbMax = roundedPos + halfSize;
}

void computeClipmapBoundsConservative(Clipmap clipmap, Vec3 cameraPos, out Vec3 aabbMin, out Vec3 aabbMax)
{
	const Vec3 halfSize = clipmap.m_size * 0.5;
	const Vec3 probeSize = clipmap.m_size / clipmap.m_probeCounts;
	const Vec3 roundedPos = round(cameraPos / probeSize) * probeSize;
	aabbMin = roundedPos - halfSize + probeSize * 0.5;
	aabbMax = roundedPos + halfSize - probeSize * 0.5;
}

F32 computeClipmapFade(Clipmap clipmap, Vec3 cameraPos, Vec3 worldPos)
{
	const Vec3 probeSize = clipmap.m_size / clipmap.m_probeCounts;
	const Vec3 halfSize = clipmap.m_size * 0.5;
	const Vec3 aabbMin = cameraPos - halfSize + probeSize;
	const Vec3 aabbMax = cameraPos + halfSize - probeSize;

	Vec3 a = (worldPos - aabbMin) / (aabbMax - aabbMin);
	a = 2.0 * a - 1.0;
	a = pow(abs(a), 8.0);
	a = 1.0 - a;

	a = select(a > 1.0, 0.0, a);
	a = max(0.0, a);

	F32 fade = a.x * a.y * a.z;

	return fade;
}

U16 findClipmapOnPosition(Clipmap clipmaps[kIndirectDiffuseClipmapCount], Vec3 cameraPos, Vec3 worldPos, F32 randFactor)
{
	F32 fade = computeClipmapFade(clipmaps[0], cameraPos, worldPos);
	if(fade > randFactor)
	{
		return 0;
	}

	fade = computeClipmapFade(clipmaps[1], cameraPos, worldPos);
	if(fade > randFactor)
	{
		return 1;
	}

	fade = computeClipmapFade(clipmaps[2], cameraPos, worldPos);
	if(fade > randFactor)
	{
		return 2;
	}

	return 3;
}

SHL1<F16> readClipmap(Clipmap clipmaps[kIndirectDiffuseClipmapCount], Texture3D<Vec4> volumes[3 * kIndirectDiffuseClipmapCount],
					  SamplerState linearAnyRepeatSampler, Vec3 cameraPos, Vec3 worldPos)
{
	Vec3 clipmapAabbMin, clipmapAabbMax;
	computeClipmapBoundsConservative(clipmaps[0], cameraPos, clipmapAabbMin, clipmapAabbMax);
	if(all(worldPos > clipmapAabbMin) && all(worldPos < clipmapAabbMax))
	{
		const Vec3 uvw = worldPosToVolumeUvw(clipmaps[0], worldPos);
		return loadSH<F16>(volumes[0], volumes[1], volumes[2], linearAnyRepeatSampler, uvw);
	}

	computeClipmapBoundsConservative(clipmaps[1], cameraPos, clipmapAabbMin, clipmapAabbMax);
	if(all(worldPos > clipmapAabbMin) && all(worldPos < clipmapAabbMax))
	{
		const Vec3 uvw = worldPosToVolumeUvw(clipmaps[1], worldPos);
		return loadSH<F16>(volumes[3], volumes[4], volumes[5], linearAnyRepeatSampler, uvw);
	}

	computeClipmapBoundsConservative(clipmaps[2], cameraPos, clipmapAabbMin, clipmapAabbMax);
	if(all(worldPos > clipmapAabbMin) && all(worldPos < clipmapAabbMax))
	{
		const Vec3 uvw = worldPosToVolumeUvw(clipmaps[2], worldPos);
		return loadSH<F16>(volumes[6], volumes[7], volumes[8], linearAnyRepeatSampler, uvw);
	}

	SHL1<F16> sh = (SHL1<F16>)0;
	return sh;
}

IrradianceDice<F16> readClipmap(Clipmap clipmaps[kIndirectDiffuseClipmapCount], Texture3D<Vec4> volumes[6 * kIndirectDiffuseClipmapCount],
								SamplerState linearAnyRepeatSampler, Vec3 cameraPos, Vec3 worldPos)
{
	Vec3 clipmapAabbMin, clipmapAabbMax;
	computeClipmapBoundsConservative(clipmaps[0], cameraPos, clipmapAabbMin, clipmapAabbMax);
	if(all(worldPos > clipmapAabbMin) && all(worldPos < clipmapAabbMax))
	{
		const Vec3 uvw = worldPosToVolumeUvw(clipmaps[0], worldPos);
		return loadIrradianceDice<F16>(volumes, linearAnyRepeatSampler, uvw, 0);
	}

	computeClipmapBoundsConservative(clipmaps[1], cameraPos, clipmapAabbMin, clipmapAabbMax);
	if(all(worldPos > clipmapAabbMin) && all(worldPos < clipmapAabbMax))
	{
		const Vec3 uvw = worldPosToVolumeUvw(clipmaps[1], worldPos);
		return loadIrradianceDice<F16>(volumes, linearAnyRepeatSampler, uvw, 6);
	}

	computeClipmapBoundsConservative(clipmaps[2], cameraPos, clipmapAabbMin, clipmapAabbMax);
	if(all(worldPos > clipmapAabbMin) && all(worldPos < clipmapAabbMax))
	{
		const Vec3 uvw = worldPosToVolumeUvw(clipmaps[2], worldPos);
		return loadIrradianceDice<F16>(volumes, linearAnyRepeatSampler, uvw, 12);
	}

	IrradianceDice<F16> dice = (IrradianceDice<F16>)0;
	return dice;
}

// ===========================================================================
// RayGen                                                                    =
// ===========================================================================
#if ANKI_RAY_GEN_SHADER

struct Consts
{
	U32 m_clipmapIdx;
	F32 m_padding0;
	F32 m_padding1;
	F32 m_padding2;
};
ANKI_FAST_CONSTANTS(Consts, g_consts)

[Shader("raygeneration")] void main()
{
	const Clipmap clipmap = g_globalRendererConstants.m_indirectDiffuseClipmaps[g_consts.m_clipmapIdx];

	// Compute clipmap bounds
	Vec3 clipmapAabbMin, clipmapAabbMax;
	computeClipmapBounds(clipmap, g_globalRendererConstants.m_cameraPosition, clipmapAabbMin, clipmapAabbMax);

	const Vec3 prevCameraPos = g_globalRendererConstants.m_previousMatrices.m_cameraTransform.getTranslationPart();
	Vec3 prevClipmapAabbMin, prevClipmapAabbMax;
	computeClipmapBounds(clipmap, prevCameraPos, prevClipmapAabbMin, prevClipmapAabbMax);

	// Compute probe info
	const Vec3 probeSize = clipmap.m_size / clipmap.m_probeCounts;
	const Vec3 cellWorldPos = DispatchRaysIndex().xyz * probeSize + probeSize * 0.5 + clipmapAabbMin;

	const UVec3 probeTexelCoord = worldPosToVolumeTexel(clipmap, cellWorldPos);
	ANKI_ASSERT(all(probeTexelCoord < clipmap.m_probeCounts));

	// Integrate to build the SH
	IrradianceDice<F16> dice = (IrradianceDice<F16>)0;
	const U16 sampleCount = 32u;

	for(U16 i = 0; i < sampleCount; ++i)
	{
		HVec3 dir = generateUniformPointOnSphere<F16>(i, sampleCount, g_globalRendererConstants.m_frame);

		const F32 tMax = 1000.0; // TODO

		constexpr U32 traceFlags = RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES;

		GBufferLight<F16> gbuffer = (GBufferLight<F16>)0;
		F32 rayT = 0.0;
		const Bool hit = materialRayTrace<F16>(cellWorldPos, dir, 0.0, tMax, 1000.0, gbuffer, rayT, traceFlags);

		const Vec3 hitPos = cellWorldPos + dir * rayT;
		const HVec3 radiance = directLighting<F16>(gbuffer, hitPos, !hit, false, tMax, traceFlags | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH);

		dice = appendIrradianceDice(dice, dir, radiance, sampleCount);
	}

	// Store the SH
	const Bool blendWithHistory = all(cellWorldPos > prevClipmapAabbMin) && all(cellWorldPos < prevClipmapAabbMax);
	if(blendWithHistory)
	{
		const IrradianceDice<F16> historyDice = loadIrradianceDice<F16>(g_clipmapVolumes, probeTexelCoord);
		dice = lerpIrradianceDice<F16>(historyDice, dice, 0.01);
	}

	storeIrradianceDice(dice, g_clipmapVolumes, probeTexelCoord);
}
#endif // ANKI_RAY_GEN_SHADER

// ===========================================================================
// Test                                                                      =
// ===========================================================================
#if NOT_ZERO(ANKI_TECHNIQUE_Test)
Texture2D<Vec4> g_depthTex : register(t0);
Texture2D<Vec4> g_gbufferRt2 : register(t1);

Texture2D<Vec4> g_blueNoiseTex : register(t2);

Texture3D<Vec4> g_clipmapVolumes[6 * kIndirectDiffuseClipmapCount] : register(t3);

RWTexture2D<Vec4> g_outTex : register(u0);

ConstantBuffer<GlobalRendererConstants> g_globalRendererConstants : register(b0);

SamplerState g_linearAnyRepeatSampler : register(s0);

[NumThreads(8, 8, 1)] void main(UVec2 svDispatchThreadId : SV_DispatchThreadID)
{
	UVec2 viewportSize;
	g_outTex.GetDimensions(viewportSize.x, viewportSize.y);

	if(any(svDispatchThreadId >= viewportSize))
	{
		return;
	}

	const Vec3 normal = unpackNormalFromGBuffer(g_gbufferRt2[svDispatchThreadId]);

	const F32 depth = g_depthTex[svDispatchThreadId].r;
	const Vec2 uv = Vec2(svDispatchThreadId) / Vec2(viewportSize);
	const Vec2 ndc = uvToNdc(uv);
	const Vec4 worldPos4 = mul(g_globalRendererConstants.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, depth, 1.0));
	Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	// Rand
	UVec2 noiseTexSize;
	g_blueNoiseTex.GetDimensions(noiseTexSize.x, noiseTexSize.y);
	Vec3 noise3 = g_blueNoiseTex[svDispatchThreadId % noiseTexSize];
	noise3 = animateBlueNoise2(noise3, g_globalRendererConstants.m_frame);

	F32 noise = noise3.x;

	const U16 clipmapIdx =
		findClipmapOnPosition(g_globalRendererConstants.m_indirectDiffuseClipmaps, g_globalRendererConstants.m_cameraPosition, worldPos, noise);
	/*if(clipmapIdx == 0)
	{
		g_outTex[svDispatchThreadId] = Vec4(1, 0, 0, 0);
	}
	else if(clipmapIdx == 1)
	{
		g_outTex[svDispatchThreadId] = Vec4(0, 1, 0, 0);
	}
	else if(clipmapIdx == 2)
	{
		g_outTex[svDispatchThreadId] = Vec4(0, 0, 1, 0);
	}
	else
	{
		g_outTex[svDispatchThreadId] = Vec4(1, 0, 1, 0);
	}
	return;*/

	if(clipmapIdx >= kIndirectDiffuseClipmapCount)
	{
		g_outTex[svDispatchThreadId] = 0.0;
		return;
	}

	const Vec3 uvw = worldPosToVolumeUvw(g_globalRendererConstants.m_indirectDiffuseClipmaps[clipmapIdx], worldPos);

	const IrradianceDice<F16> dice = loadIrradianceDice<F16>(g_clipmapVolumes, g_linearAnyRepeatSampler, uvw, clipmapIdx * 6);
	const HVec3 irradiance = evaluateIrradianceDice<F16>(dice, normal);

	g_outTex[svDispatchThreadId] = Vec4(irradiance, 0.0);
}
#endif
