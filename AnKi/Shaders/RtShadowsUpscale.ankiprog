// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki technique comp

#include <AnKi/Shaders/RtShadows.hlsl>
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/BilateralFilter.hlsl>

SamplerState g_linearAnyClampSampler : register(s0);
Texture2D<Vec4> g_quarterShadowsTex : register(t0);
RWTexture2D<Vec4> g_fullShadowStorageTex : register(u0);
Texture2D<Vec4> g_quarterDepthTex : register(t1);
Texture2D<Vec4> g_fullDepthTex : register(t2);

[numthreads(8, 8, 1)] void main(UVec2 svDispatchThreadId : SV_DISPATCHTHREADID)
{
	Vec2 fullShadowStorageTexSize;
	g_fullShadowStorageTex.GetDimensions(fullShadowStorageTexSize.x, fullShadowStorageTexSize.y);

	if(any(Vec2(svDispatchThreadId) >= fullShadowStorageTexSize))
	{
		return;
	}

	const Vec2 uv = (Vec2(svDispatchThreadId) + 0.5) / fullShadowStorageTexSize;

	// Reference
	const F32 depthCenter = g_fullDepthTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).x;

	// Do a bilateral upscale
	F32 sumShadowFactor = 0.0f;
	const Vec2 texelSize = 1.0 / (fullShadowStorageTexSize / 2.0f);
	const I32 radius = 1;
	F32 sumWeight = kEpsilonF32;
	for(I32 x = -radius; x <= radius; ++x)
	{
		for(I32 y = -radius; y <= radius; ++y)
		{
			const Vec2 sampleUv = uv + Vec2(x, y) * texelSize;
			const F32 depthTap = g_quarterDepthTex.SampleLevel(g_linearAnyClampSampler, sampleUv, 0.0).x;

			const F32 w = calculateBilateralWeightDepth<F32>(depthCenter, depthTap, 1.0);

			const F32 localShadowFactor = g_quarterShadowsTex.SampleLevel(g_linearAnyClampSampler, sampleUv, 0.0).x;

			sumShadowFactor += localShadowFactor * w;

			sumWeight += w;
		}
	}

	sumShadowFactor /= sumWeight;

	g_fullShadowStorageTex[svDispatchThreadId.xy] = sumShadowFactor;
}
