// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki technique_start comp

#include <AnKi/Shaders/Common.hlsl>
#include <AnKi/Shaders/Include/GpuSceneTypes.h>
#include <AnKi/Shaders/Include/GpuVisibilityTypes.h>
#include <AnKi/Shaders/VisibilityAndCollisionFunctions.hlsl>

// Buffers that point to the GPU scene
StructuredBuffer<GpuSceneRenderableBoundingVolume> g_renderableBoundingVolumes : register(t0);
StructuredBuffer<GpuSceneRenderable> g_renderables : register(t1);
StructuredBuffer<GpuSceneMeshLod> g_meshLods : register(t2);
StructuredBuffer<Mat3x4> g_transforms : register(t3);

RWStructuredBuffer<AccelerationStructureInstance> g_visibleInstances : register(u0);
RWStructuredBuffer<U32> g_visibleRenderableIndices : register(u1); // 1st element is the count

globallycoherent RWStructuredBuffer<U32> g_counterBuffer : register(u2); // 2 counters per dispatch

RWStructuredBuffer<DispatchIndirectArgs> g_nextDispatchIndirectArgs : register(u3);

ANKI_FAST_CONSTANTS(GpuVisibilityAccelerationStructuresConstants, g_consts)

#define NUMTHREADS 64

[numthreads(NUMTHREADS, 1, 1)] void main(U32 svDispatchThreadId : SV_DISPATCHTHREADID, U32 svGroupIndex : SV_GROUPINDEX)
{
	// Skip remaining threads
	const U32 bvolumeIdx = svDispatchThreadId;
	U32 bvolumeCount;
	U32 unused;
	g_renderableBoundingVolumes.GetDimensions(bvolumeCount, unused);
	Bool visible = (bvolumeIdx < bvolumeCount);

	// Sphere test
	GpuSceneRenderableBoundingVolume bvolume;
	Vec3 sphereCenter;
	if(visible)
	{
		bvolume = g_renderableBoundingVolumes[bvolumeIdx];

		sphereCenter = (bvolume.m_aabbMin + bvolume.m_aabbMax) * 0.5f;
		visible = testSphereSphereCollision(sphereCenter, bvolume.m_sphereRadius, g_consts.m_pointOfTest, g_consts.m_testRadius);
	}

	// All good, write the instance
	if(visible)
	{
		// LOD selection
		U32 lod;
		const Bool insideCameraFrustum = frustumTest(g_consts.m_clipPlanes, sphereCenter, bvolume.m_sphereRadius);
		if(insideCameraFrustum)
		{
			// Visible by the camera, need to match the camera LODs
			const F32 distFromLodPoint = length(sphereCenter - g_consts.m_pointOfTest) - bvolume.m_sphereRadius;
			if(distFromLodPoint < g_consts.m_maxLodDistances[0])
			{
				lod = 0u;
			}
			else if(distFromLodPoint < g_consts.m_maxLodDistances[1])
			{
				lod = 1u;
			}
			else
			{
				lod = 2u;
			}
		}
		else
		{
			// Not visible by the main camera, lowest LOD
			lod = 2u;
		}

		const U32 renderableIdx = bvolume.m_renderableIndex_20bit_renderStateBucket_12bit >> 12u;
		const GpuSceneRenderable renderable = g_renderables[renderableIdx];

		const U32 meshLodIndex = renderable.m_meshLodsIndex + lod;
		const GpuSceneMeshLod meshLod = g_meshLods[meshLodIndex];

		if(meshLod.m_blasAddress.x != 0 || meshLod.m_blasAddress.y != 0)
		{
			// It has a BLAS, write what is to write

			const Mat3x4 transform = g_transforms[renderable.m_worldTransformsIndex];
			Mat3x4 meshQuantizationTransform;
			meshQuantizationTransform.m_row0 = Vec4(meshLod.m_positionScale, 0.0f, 0.0f, meshLod.m_positionTranslation.x);
			meshQuantizationTransform.m_row1 = Vec4(0.0f, meshLod.m_positionScale, 0.0f, meshLod.m_positionTranslation.y);
			meshQuantizationTransform.m_row2 = Vec4(0.0f, 0.0f, meshLod.m_positionScale, meshLod.m_positionTranslation.z);
			const Mat3x4 finalTrf = combineTransformations(transform, meshQuantizationTransform);

			U32 instanceIdx;
			InterlockedAdd(g_counterBuffer[0], 1, instanceIdx);

			AccelerationStructureInstance instance;
			instance.m_transform = finalTrf;
			instance.m_mask8_instanceCustomIndex24 = (meshLod.m_tlasInstanceMask << 24u) | (instanceIdx & 0x00FFFFFFu);
			instance.m_flags8_instanceShaderBindingTableRecordOffset24 =
				((kAccellerationStructureFlagTriangleFrontCounterlockwise | kAccellerationStructureFlagTriangleFacingCullDisable)
				 << (AccellerationStructureFlag)24u)
				| (instanceIdx & 0x00FFFFFFu);
			instance.m_accelerationStructureAddress = meshLod.m_blasAddress;
			g_visibleInstances[instanceIdx] = instance;

			g_visibleRenderableIndices[instanceIdx + 1] = renderableIdx;
		}
	}

	// Store the counters to the actual buffers
	{
		Bool lastThreadgroupExecuting = false;
		if(svGroupIndex == 0)
		{
			U32 threadgroupIdx;
			InterlockedAdd(g_counterBuffer[1], 1, threadgroupIdx);
			const U32 threadgroupCount = (bvolumeCount + NUMTHREADS - 1) / NUMTHREADS;
			lastThreadgroupExecuting = (threadgroupIdx + 1 == threadgroupCount);
		}

		// Sync to make sure all the atomic ops have finished before the following code reads them
		AllMemoryBarrierWithGroupSync();

		if(lastThreadgroupExecuting)
		{
			const U32 visible = g_counterBuffer[0];
			g_visibleRenderableIndices[0] = visible;

			g_counterBuffer[0] = 0;
			g_counterBuffer[1] = 0;

			// Update indirect args of some next job
			U32 total, unused;
			g_visibleInstances.GetDimensions(total, unused);

			const U32 remaining = total - visible;

			g_nextDispatchIndirectArgs[0].m_threadGroupCountX = (remaining + NUMTHREADS - 1) / NUMTHREADS;
			g_nextDispatchIndirectArgs[0].m_threadGroupCountY = 1;
			g_nextDispatchIndirectArgs[0].m_threadGroupCountZ = 1;
		}
	}
}

#pragma anki technique_end comp
