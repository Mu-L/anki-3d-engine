// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator DEPTH_FAIL_VISUALIZATION 0 1
#pragma anki mutator OBJECT_TYPE 0 1 2 3 4 // Same as GpuSceneNonRenderableObjectType

#include <AnKi/Shaders/Common.hlsl>
#include <AnKi/Shaders/ClusteredShadingFunctions.hlsl>
#include <AnKi/Shaders/TonemappingFunctions.hlsl>

constexpr F32 kAlpha = 1.0f;
constexpr F32 kBillboardScale = 0.25f;

struct Constants
{
	Mat4 m_viewProjMat;
	Mat3x4 m_camTrf;
};

ANKI_FAST_CONSTANTS(Constants, g_consts)

#if OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_LIGHT
typedef LightUnion ClusteredType;
#elif OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_DECAL
typedef Decal ClusteredType;
#elif OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_FOG_DENSITY_VOLUME
typedef FogDensityVolume ClusteredType;
#elif OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_REFLECTION_PROBE
typedef ReflectionProbe ClusteredType;
#elif OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_GLOBAL_ILLUMINATION_PROBE
typedef GlobalIlluminationProbe ClusteredType;
#else
#	error See file
#endif

StructuredBuffer<ClusteredType> g_visibleObjects : register(t1);
StructuredBuffer<U32> g_visibleObjectCount : register(t2);

struct VertOut
{
	Vec4 m_svPosition : SV_POSITION;
	Vec2 m_uv : TEXCOORD;
	Vec4 m_colorScale : COLOR;
	nointerpolation U32 m_textureIndex : TEX_INDEX;
};

#pragma anki technique_start vert

struct VertIn
{
	U32 m_svInstanceId : SV_INSTANCEID;
	U32 m_svVertexId : SV_VERTEXID;
};

VertOut main(VertIn input)
{
	VertOut output;

	output.m_colorScale = Vec4(1.0f, 1.0f, 1.0f, kAlpha);
	output.m_textureIndex = 0;

	output.m_uv = Vec2(input.m_svVertexId & 1u, ((input.m_svVertexId + 1u) / 3u) & 1u);

	const U32 objCount = g_visibleObjectCount[0];

	if(input.m_svInstanceId < objCount)
	{
#if OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_LIGHT
		const Vec3 localPos = g_visibleObjects[input.m_svInstanceId].m_position;
		output.m_colorScale.xyz = reinhardTonemap(g_visibleObjects[input.m_svInstanceId].m_diffuseColor);
		output.m_textureIndex = g_visibleObjects[input.m_svInstanceId].m_lightType;
#elif OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_DECAL
		const Vec3 localPos = g_visibleObjects[input.m_svInstanceId].m_sphereCenter;
#elif OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_FOG_DENSITY_VOLUME
		const ClusteredType obj = g_visibleObjects[input.m_svInstanceId];
		const Vec3 localPos = (obj.m_isBox) ? (obj.m_aabbMinOrSphereCenter + obj.m_aabbMaxOrSphereRadius) / 2.0f : obj.m_aabbMinOrSphereCenter;
#elif OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_REFLECTION_PROBE
		const Vec3 localPos = g_visibleObjects[input.m_svInstanceId].m_position;
#elif OBJECT_TYPE == ANKI_GPU_SCENE_NON_RENDERABLE_OBJECT_TYPE_GLOBAL_ILLUMINATION_PROBE
		const Vec3 localPos = (g_visibleObjects[input.m_svInstanceId].m_aabbMin + g_visibleObjects[input.m_svInstanceId].m_aabbMax) / 2.0f;
#else
#	error See file
#endif

		// Rotate towards the camera and apply translation
		const Vec3 worldPos = mul(g_consts.m_camTrf, Vec4((output.m_uv * 2.0 - 1.0) * kBillboardScale, 0.0, 0.0)) + localPos;

		output.m_svPosition = mul(g_consts.m_viewProjMat, Vec4(worldPos, 1.0));
	}
	else
	{
		// Skip this instance by making the vertex degenerate
		output.m_svPosition = 0.0f;
	}

	return output;
}
#pragma anki technique_end vert

#pragma anki technique_start pixel
#include <AnKi/Shaders/ImportanceSampling.hlsl>

SamplerState g_trilinearRepeatSampler : register(s1);
Texture2D<Vec4> g_tex : register(t3);
Texture2D<Vec4> g_tex2 : register(t4);

// NOTE: Don't eliminate the binding because it confuses the descriptor set creation
#if DEPTH_FAIL_VISUALIZATION == 1
SamplerState g_nearestAnyClampSampler : register(s0);
Texture2D g_depthRt : register(t0);
#endif

Vec4 main(VertOut input) : SV_TARGET0
{
	ANKI_MAYBE_UNUSED(input);

	// Check if we should skip the frag
	F32 colorFactor = 1.0f;
#if DEPTH_FAIL_VISUALIZATION == 1
	Vec2 texSize;
	g_depthRt.GetDimensions(texSize.x, texSize.y);
	const Vec2 uv = input.m_svPosition.xy / texSize;
	const F32 depthRef = g_depthRt.SampleLevel(g_nearestAnyClampSampler, uv, 0.0).r;
	const Bool depthTestFailed = input.m_svPosition.z >= depthRef;
	if(depthTestFailed)
	{
		colorFactor = 0.6;
	}
#endif

	// Write the color
	if(input.m_textureIndex == 0)
	{
		return g_tex.Sample(g_trilinearRepeatSampler, input.m_uv) * input.m_colorScale * colorFactor;
	}
	else
	{
		return g_tex2.Sample(g_trilinearRepeatSampler, input.m_uv) * input.m_colorScale * colorFactor;
	}
}
#pragma anki technique_end pixel
